---
title: "Introduction to ggplot"
format: 
  revealjs:
    theme: 
      - ../../www/custom.scss
---

## #goals

::: {style="height: 0px;"}
{{< include ../../www/_scss.qmd >}}
:::

```{r data, include = FALSE}
library(tidyverse)
nlsy <- read_csv(here::here("data", "nlsy_cc.csv")) |> 
  mutate(eyesight_cat = factor(eyesight, labels = c("Excellent", "Very Good",
               "Good", "Fair", "Poor")),
    glasses_cat = factor(glasses, labels = c("Doesn't wear glasses",
                     "Wears glasses/contacts")),
    race_eth_cat = fct_recode(as.character(race_eth),
    "Hispanic" = "1",
    "Black" = "2",
    "Non-Black, Non-Hispanic" = "3"),
    sex_cat = factor(sex, labels = c("Male", "Female")))
```


```{r goals-plot-1}
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar() +
  facet_grid(cols = vars(glasses_cat)) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_discrete(breaks = c("Excellent", 
                              "Good", "Poor"),
                   name = "Eyesight quality") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(
          angle = 45, vjust = 1, hjust = 1)) +
  labs(title = "Eyesight in NLSY",
       y = NULL) +
  coord_cartesian(expand = FALSE)
```

## #goals

```{r goals-plot-2}
ggplot(data = nlsy, 
       aes(x = income, y = age_bir, 
           color = sex_cat)) +
  geom_point(alpha = 0.1) +
  scale_color_brewer(palette = "Set1") +
  scale_x_log10(labels = scales::dollar) +
  geom_smooth(aes(group = sex_cat), 
              method = "lm") +
  facet_grid(rows = vars(race_eth_cat)) +
  theme_minimal() +
  theme(legend.position = "top") +
  labs(title = "Relationship between income and age at first birth",
    subtitle = "by sex and race/ethnicity",
    color = "Sex",
    x = "Income",
    y = "Age at first birth")
```

## Why ggplot?

- Powerful and flexible: create complex and customized visualizations easily
- Reproducibility and efficiency: promotes reproducibility by offering consistent syntax and saves time through automation of plot creation
- Layered approach: incrementally build visualizations with multiple layers, exploring different aspects of data
- Extensive customization: essentially infinite options to tailor visualizations

## ggplot builds figures by adding on pieces via a particular "*g*rammar of *g*raphics"

::: center
![](../../img/grammar.png)
:::

## Basic structure of a ggplot

```         
ggplot(data = {data}, aes(x = {xvar}, y = {yvar}, <characteristic> = {othvar}, ...)) +
      <geom>(<characteristic> = "value", ...) + 
      ...
```
::: smaller
-   `{data}`: must be a dataframe (or tibble!)
-   `{xvar}` and `{yvar}` are the names (unquoted) of the variables on the x- and y-axes
    - some graphs may not require both, or may require other parameters
-   `{othvar}` is some other unquoted variable name that defines a grouping or other characteristic you want to map to an aesthetic
-   `<characteristic>`: you can map `{othvar}` (or a fixed `"value"`) to any of a number of aesthetic features of the figure; e.g., color, shape, size, linetype, etc.
-   `<geom>`: the geometric feature you want to use; e.g., point (scatterplot), line, histogram, bar, etc.
-   `"value"`: a fixed value that defines some characteristic of the figure; e.g., "red", 10, "dashed"
-   ... : there are numerous other options to discover!
:::

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: true
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat))
```

- `ggplot()` doesn't plot any data itself, it just sets up the data and variables

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "3"
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar()
```

- `geom_bar()` creates a bar graph for the number of observations with a certain value of the `x` variable
  - does not need a `y` variable
  
::: {.callout-tip}
use `geom_col()` if you have a `y` variable that you want to use as the height of the bars
:::


## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "4"
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar() +
  facet_grid(cols = vars(glasses_cat))
```

- `facet_grid()` creates a panel for each value of another variable
  - can also do `rows = `
  - variable name should be within `vars()` (for reasons we'll get to later!)

::: {.callout-tip}
use `facet_wrap()` if you want to create panels that expand along rows and columns (e.g., to facet by many countries)
:::

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "5-6"
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar() +
  facet_grid(cols = vars(glasses_cat)) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1)
```

- `scale_{fill/color}_{...}()` functions change the color palette
  - some are appropriate for continuous variables, others discrete
  
::: {.callout-tip}
`scale_fill_viridis_d()` good color-blind and black & white-friendly options
:::

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "7-9"
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar() +
  facet_grid(cols = vars(glasses_cat)) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_discrete(breaks = c("Excellent", 
                              "Good", "Poor"),
                   name = "Eyesight quality")
```

- `scale_{x/y}_{...}()` functions change the axis scale and/or labeling

::: {.callout-tip}
`scale_y_log10()` is helpful when plotting odds or risk ratios
:::

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "10"
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar() +
  facet_grid(cols = vars(glasses_cat)) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_discrete(breaks = c("Excellent", 
                              "Good", "Poor"),
                   name = "Eyesight quality") +
  theme_minimal()
```

- `theme_{...}()` changes the "look" of the plot
  - but not the data color palette

::: {.callout-tip}
find lots of themes and color palettes at <https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/>
:::

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "11-13"
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar() +
  facet_grid(cols = vars(glasses_cat)) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_discrete(breaks = c("Excellent", 
                              "Good", "Poor"),
                   name = "Eyesight quality") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(
          angle = 45, vjust = 1, hjust = 1))
```

- you can also specify any component of the theme directly

::: {.callout-tip}
lots of arguments can be set to `element_blank()` to get rid of them
:::


## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "14-15"
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar() +
  facet_grid(cols = vars(glasses_cat)) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_discrete(breaks = c("Excellent", 
                              "Good", "Poor"),
                   name = "Eyesight quality") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(
          angle = 45, vjust = 1, hjust = 1)) +
  labs(title = "Eyesight in NLSY",
       y = NULL)
```

- `labs()` can add subtitles, caption, alt text, as well as label any aesthetics (fill, color, etc.)

::: {.callout-tip}
there's a lot of redundancy... we could have specified `x = "Eyesight quality"` here instead.
:::

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "16"
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar() +
  facet_grid(cols = vars(glasses_cat)) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_discrete(breaks = c("Excellent", 
                              "Good", "Poor"),
                   name = "Eyesight quality") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(
          angle = 45, vjust = 1, hjust = 1)) +
  labs(title = "Eyesight in NLSY",
       y = NULL) +
  coord_cartesian(expand = FALSE)
```

- `coord_{...}()` functions change the coordinate system
  - cartesian is already the default, but `expand = FALSE` means there is no extra space beyond the axis limits

::: {.callout-tip}
`coord_fixed(ratio = 1)` will ensure that 1 unit on the x-axis is the same length as one unit on the y-axis
:::

## Can you recognize some of the layers we may need for this one?

```{r}
ggplot(data = nlsy, 
       aes(x = income, y = age_bir, 
           color = sex_cat)) +
  geom_point(alpha = 0.1) +
  scale_color_brewer(palette = "Set1") +
  scale_x_log10(labels = scales::dollar) +
  geom_smooth(aes(group = sex_cat), 
              method = "lm") +
  facet_grid(rows = vars(race_eth_cat)) +
  theme_minimal() +
  theme(legend.position = "top") +
  labs(title = "Relationship between income and age at first birth",
    subtitle = "by sex and race/ethnicity",
    color = "Sex",
    x = "Income",
    y = "Age at first birth")
```


## Returning to our basic structure

```         
ggplot(data = {data}, aes(x = {xvar}, y = {yvar}, <characteristic> = {othvar}, ...)) +
      <geom>(<characteristic> = "value", ...) + 
      ...
```

Let's walk through some more examples in depth


##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir)) +
  geom_point()
```

What if we want to change the color of the points?

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir)) +
  geom_point(color = "blue")
```

When we put `color =` *outside* the `aes()`, it means we're giving it a specific color value that applies to all the points.

::: callout-warning
This is the `<characteristic> = "value"` structure and a common confusion!
:::

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir)) +
  geom_point(color = "#3d93c8")
```

Sometimes we do want to change all of the colors, though! We can also use hex codes.

::: callout-tip
One of my favorite color resources: https://www.color-hex.com
:::

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir, 
           color = eyesight)) +
  geom_point()
```

When we put `color =` *inside* the `aes()` -- with no quotation marks -- it means we're telling it how it should assign colors.

Here we're plotting the values according to eyesight, where 1 is excellent and 5 is poor.

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir)) +
  geom_point(aes(color = eyesight))
```

Note that we could also put the `aes()` (aesthetics) in the `geom_()` itself.

If within `geom_point()`, it will only apply to that geom.

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir)) +
  geom_point(aes(color = eyesight)) +
  geom_line()
```

if we add, say, `geom_line()`, it will not be colored by eyesight

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir, 
           color = eyesight)) +
  geom_point() +
  scale_color_gradient(low = "green",
                       high = "purple")
```

The blues are hard to distinguish, so we could map the values of `eyesight` to a different continuous scale using `scale_color_gradient()`

You can read lots more about this function [here](https://ggplot2.tidyverse.org/reference/scale_gradient.html), so you don't have to have such ugly color scales!
## 

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir, 
           color = factor(eyesight))) +
  geom_point()
```

But wait! The variable `eyesight` isn't really continuous: it has 5 discrete values.

We want to treat it as a *factor* (categorical) variable using the `factor()` function

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir, 
           color = factor(eyesight))) +
  geom_point() +
  scale_color_manual(
    values = c("blue", "purple", "red",
               "green", "yellow"))
```

Now if we want to change the color scheme, we have to use a different function.

Before we used `scale_color_gradient()`, which works for continuous variables, now `scale_color_manual()`.

There are a lot of options that follow the same naming scheme.

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir, 
           color = factor(eyesight))) +
  geom_point()  +
  scale_color_brewer(palette = "Set1")
```

There are tons of different options in R for color palettes.

You can play around with those in the `RColorBrewer` package [here](http://colorbrewer2.org).

You can access the scales in that package with `scale_color_brewer()`, or see them all after installing the package with `RColorBrewer::display.brewer.all()`



##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, 
       aes(x = income, y = age_bir, 
           color = factor(eyesight))) +
  geom_point()  +
  scale_color_brewer(palette = "Set1", 
            name = "Eyesight",
            labels = c("Excellent",
                       "Very Good",
                       "Good",
                       "Fair",
                       "Poor"))
```

Each of the `scale_color_x()` functions has a lot of the same arguments.

::: callout-warning
Make sure if you are labelling a factor variable in a plot like this that you get the names right!
:::

## Exercise

1. Make a scatterplot showing the relationship between sleep on weekdays and on weekends. 
2. Play around with changing the colors.
3. Type `scale_color` into your R console and press tab to see the autocomplete. Look through the options and find one we haven't seen. that works with your plot.


## Facets

One of the most useful features of `{ggplot2}` is the ability to "facet" a graph by splitting it up according to the values of some variable.

You might use this to show results for a lot of outcomes or exposures at once, for example, or see how some relationship differs by something like age or geographic region

::: center
![scale=80%](../../img/facets.png)
:::

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = nsibs)) +
  geom_bar() +
  labs(x = "Number of siblings")
```


We'll introduce bar graphs at the same time!

Notice how we only need an `x =` argument - the y-axis is automatically the count with this geom.

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = nsibs)) +
  geom_bar() +
  labs(x = "Number of siblings") +
  facet_grid(cols = vars(region))
```

The `facet_grid()` function splits up the data according to a variable(s).

Here we've split it by region into columns.

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = nsibs)) +
  geom_bar() +
  labs(x = "Number of siblings") +
  facet_grid(rows = vars(region))
```

Since that was hard to read, we'll probably want to split by rows instead.

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = nsibs)) +
  geom_bar() +
  labs(x = "Number of siblings") +
  facet_grid(rows = vars(region),
             margins = TRUE)
```

We can also add a row for all of the data combined

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = nsibs)) +
  geom_bar() +
  labs(x = "Number of siblings") +
  facet_grid(rows = vars(region),
             margins = TRUE,
             scales = "free_y")
```

That squishes the other rows though! We can allow them all to have their own axis limits with the `scales =` argument.

Other options are "free_x" if we want to allow the x-axis scale to vary, or just "free" to allow for both.

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = nsibs)) +
  geom_bar() +
  labs(x = "Number of siblings") +
  facet_wrap(vars(region))
```

We can use `facet_wrap()` instead, if we want to use both multiple rows and columns for all the values of a variable.

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(data = nlsy, aes(x = nsibs)) +
  geom_bar() +
  labs(x = "Number of siblings") +
  facet_wrap(vars(region), 
             ncol = 3)
```

It tries to make a good decision, but you can override how many columns you want!

## Wait, these look like histograms!

When we have a variable with a lot of possible values, we may want to bin them with a histogram

```{r}
ggplot(nlsy, aes(x = income)) +
  geom_histogram()
```

## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.

We used discrete values with `geom_bar()`, but with `geom_histogram()` we're combining values: the default is into 30 bins.

This is one of the most common warning messages I get in R! <br>

```{r, out.width = "50%", echo = FALSE, fig.align = "center"}
knitr::include_graphics("https://www.washingtonpost.com/pbox.php?url=http://www.washingtonpost.com/news/volokh-conspiracy/wp-content/uploads/sites/14/2015/08/Warning-2.gif&w=1484&op=resize&opt=1&filter=antialias&t=20170517")
```

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(nlsy, aes(x = income)) +
  geom_histogram(bins = 10)
```


We can use `bins =` instead, if we want!

::: callout-note
Note how this fits into the `<characteristic> = "value"` structure
:::

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(nlsy, aes(x = income)) +
  geom_histogram(bins = 100) #<<
```

::: callout-warning
Be aware that you may interpret your data differently depending on how you bin it!
:::


##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(nlsy, aes(x = income)) +
  geom_histogram(binwidth = 1000)
```


Sometimes the bin width actually has some meaning so we want to specify that

Here, each bin is $1000 -- you can see the $5000 and $10000 increments

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(nlsy, aes(x = income)) +
  geom_histogram() +
  scale_x_log10()
```

There are a lot of `scale_x_()` and `scale_y_()` functions for you to explore

::: callout-tip
The naming schemes work similarly to the `scale_color` ones, just with different options!
:::

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
ggplot(nlsy, aes(x = income)) +
  geom_histogram() +
  scale_x_log10(labels = scales::dollar)
```

The `{scales}` packages contains lots of helpful number formatting functions

See the `help(scale_x_log10)` for some examples

## Exercise

Make a fancy histogram showing the distribution of income in this data.


## Finally, themes to make our plots prettier

You probably recognize the ggplot theme. But did you know you can trick people into thinking you made your figures in Stata?

::: columns
::: {.column width="49%"}
```{r, echo = FALSE, out.width = "85%"}
ggplot(data = nlsy) +
  geom_histogram(aes(x = income),
                 bins = 100) +
  scale_x_log10()
```
:::

::: {.column width="48%"}
```{r, echo = FALSE, out.width = "85%"}
ggplot(data = nlsy) +
  geom_histogram(aes(x = income),
                 bins = 100) +
  scale_x_log10() +
  ggthemes::theme_stata()
```
:::
:::

##
```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
p <- ggplot(nlsy, 
            aes(x = factor(sleep_wknd), 
                y = sleep_wkdy,
                fill = factor(sleep_wknd))) +
  geom_boxplot() +
  scale_fill_discrete(guide = "none") +
  labs(x = "hours slept on weekends",
       y = "hours slept on weekends",
       title = "The more people sleep on weekends, the more they\n sleep on weekdays",
       subtitle = "According to NLSY data")

p
```

Let's store our plot first.

Plots work just like other R objects, meaning we can use the assignment arrow.

::: callout-caution
# Question
Can you figure out what each chunk of this code is doing to the figure?
:::

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
p +
  theme_minimal() #<<
```


We can change the overall theme

Since we stored the plot as `p`, it's easy to add on / try different things

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
p +
  theme_dark()
```

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
p +
  theme_classic()
```

##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
p +
  theme_void()
```
##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
p +
  ggthemes::theme_fivethirtyeight()
```

Other packages contain themes


##

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
p +
  ggthemes::theme_excel_new()
```

In case you miss Excel....

## 

```{r}
#| output-location: column
#| echo: true
#| fig-width: 6
#| fig-asp: .7
p +
  louisahstuff::my_theme()
```


You can even make your own!

## Finally, save it!

If your data changes, you can easily run the whole script again:

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5"
library(tidyverse)
dataset <- read_csv("dataset.csv")
ggplot(dataset) + 
  geom_point(aes(x = xvar, y = yvar))
ggsave(filename = "scatterplot.pdf")
```

The `ggsave()` function will automatically save the most recent plot in your output.

To be safe, you can store your plot, e.g., `p <- ggplot(...) + ...` and then

```{r}
#| eval: false
#| echo: true
ggsave(filename = "scatterplot.pdf", plot = p)
```

## More resources

:::: columns
::: {.column width="50%"}
Cheat sheet: https://www.rstudio.com/resources/cheatsheets/#ggplot2
Catalog: http://shiny.stat.ubc.ca/r-graph-catalog/
Cookbook: http://www.cookbook-r.com/Graphs/
Official package reference: https://ggplot2.tidyverse.org/index.html
List of themes and instructions to make your own: https://www.datanovia.com/en/blog/ggplot-themes-gallery/
:::
::: {.column width="50%"}
![](https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png?raw=true)
:::
:::

## Exercise

See how close you can get to this plot!

```{r}
#| echo: false
ggplot(data = nlsy, 
       aes(x = income, y = age_bir, 
           color = sex_cat)) +
  geom_point(alpha = 0.1) +
  scale_color_brewer(palette = "Set1") +
  scale_x_log10(labels = scales::dollar) +
  geom_smooth(aes(group = sex_cat), 
              method = "lm") +
  facet_grid(rows = vars(race_eth_cat)) +
  theme_minimal() +
  theme(legend.position = "top") +
  labs(title = "Relationship between income and age at first birth",
    subtitle = "by sex and race/ethnicity",
    color = "Sex",
    x = "Income",
    y = "Age at first birth")
```



<!-- Work through gradually filling in things to build up -->

<!-- ```{r, echo = FALSE, out.width = "55%", fig.align = "left", eval = FALSE} -->
<!-- ggplot(nlsy, aes(nsibs, age_bir, col = factor(region))) + -->
<!--   geom_jitter(alpha = 0.3) + -->
<!--   geom_smooth(method = "loess", se = FALSE) + -->
<!--   labs(title = "Relationship between family size and age at first birth", -->
<!--        subtitle = "By U.S. Region, with Loess curves", -->
<!--        x = "Number of siblings", -->
<!--        y = "Age at first birth") + -->
<!--   scale_color_viridis_d(labels = c("Northeast", "North Central", "South", "West"), -->
<!--                         name = "Region") + -->
<!--   facet_grid(cols = vars(sex), -->
<!--              labeller = labeller(sex = c("1" = "Male", "2" = "Female"))) + -->
<!--   theme_minimal() + -->
<!--   theme(legend.position = "bottom") -->
<!-- ``` -->

<!-- 1. Using the NLSY data, make a scatter plot of the relationship between hours of sleep on weekends and weekdays. Color it according to region (where 1 = northeast, 2 = north central, 3 = south, and 4 = west). -->

<!-- 2. Replace `geom_point()` with `geom_jitter()`. What does this do? Why might this be a good choice for this graph? Play with the `width = ` and `height = ` options. This site may help: https://ggplot2.tidyverse.org/reference/geom_jitter.html -->

<!-- 3. Use the `shape = ` argument to map the sex variable to different shapes. Change the shapes to squares and diamonds. (Hint: how did we manually change colors to certain values? This might help: https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) -->

<!-- 1. When we're comparing distributions with very different numbers of observations, instead of scaling the y-axis like we did with the `facet_grid()` function, we might want to make density histograms. Use google to figure out how to make a density histogram of income. Facet it by region. -->

<!-- 2. Make each of the regions in your histogram from part 1 a different color. (Hint: compare what `col = ` and `fill = ` do to histograms). -->

<!-- 3. Instead of a log-transformed x-axis, make a square-root transformed x-axis. -->

<!-- 4. Doing part 3 squishes the labels on the x-axis. Using the `breaks = ` argument that all the `scale_x_()` functions have, make labels at 1000, 10000, 25000, and 50000. -->

<!-- ## Other geoms -->

<!-- ::: center -->
<!-- ![](../../img/geoms.png){width=900} -->
<!-- ::: -->

<!-- <!-- - A helpful reference can also be found here: http://sape.inf.usi.ch/quick-reference/ggplot2/geom --> -->

<!-- ::: aside -->
<!-- Image via <https://nbisweden.github.io/RaukR-2019/ggplot/presentation/ggplot_presentation.html> -->
<!-- ::: -->

<!-- ## -->