---
title: "Homework 2"
format: docx
order: 2
---

Please copy and paste your code and answers into this document and submit on Canvas.

1. Using the NLSY data, make a scatter plot of the relationship between hours of sleep on weekends and weekdays. Color it according to region (where 1 = northeast, 2 = north central, 3 = south, and 4 = west).

```{r}
#read in data - SF: do we need to include how to read in the data in the homework instructions? or will we cover in class how to read in that specific dataset as you used the same data for your slides
library(tidyverse)
nlsy <- read_csv(here::here("data", "nlsy_cc.csv"))

library(ggplot2)
nlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, 
           color = factor(region))) + geom_point() 
#for all of the following questions, how do you want to handle labeling for grading? would we want nicely labeled graphs or is that not the main point and therefore they can make it pretty with labels etc. if they want but we will not deduct points if they do?
```


2. Replace `geom_point()` with `geom_jitter()`. What does this do? Why might this be a good choice for this graph? Play with the `width = ` and `height = ` options. This site may help: https://ggplot2.tidyverse.org/reference/geom_jitter.html

```{r}
library(ggplot2)
nlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, 
           color = factor(region))) + geom_jitter(width=1, height=1)
nlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, 
           color = factor(region))) + geom_jitter(width=3, height=3)
 nlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, 
           color = factor(region))) + geom_jitter(width=5, height=5)
```
Response: With geom_jitter() compared to geom_point(), we can see more plotted dots. This is due to geom_jitter() adding random dots around the observed values. This might help picture what the natural variability of these variables might look like in a bigger sample and indicate the true underlying distribution more accurately. The width and height option relate how far away the random dots may be located from the observed data.

3. Use the `shape = ` argument to map the sex variable to different shapes. Change the shapes to squares and diamonds. (Hint: how did we manually change colors to certain values? This might help: https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)

```{r}
#should they use the geom_point or geom_jitter function here?
#filled square = 15, filled diamond = 18

library(ggplot2)
nlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, 
         col = factor(region) )) + geom_point(aes(shape=factor(sex)), size=2.5) + scale_shape_manual(values=c(15, 18))
```


4. When we're comparing distributions with very different numbers of observations, instead of scaling the y-axis like we did with the `facet_grid()` function, we might want to make density histograms. Use google to figure out how to make a density histogram of income. Facet it by region.
```{r}
ggplot(data = nlsy, aes(x = income)) +
  geom_histogram(aes(y = ..density..), col = "black", fill = "red", binwidth=1000) +
  facet_wrap(vars(region))
```

5. Make each of the regions in your histogram a different color and square-root transform the x-axis.

```{r}
ggplot(data = nlsy, aes(x = income)) +
  geom_histogram(aes(y = ..density.., fill=factor(region)), col = "black") +
  facet_wrap(vars(region))+
scale_x_sqrt()
```


7. Doing the last question squishes the labels on the x-axis. Using the `breaks = ` argument that all the `scale_x_()` functions have, make labels at 1000, 10000, 25000, and 50000. To make these easier to read, format them with commas (But not dollar signs. Hint: look at the examples in the documentation.)

```{r}
ggplot(data = nlsy, aes(x = income)) +
  geom_histogram(aes(y = ..density.., fill=factor(region)), col = "black") +
  facet_wrap(vars(region))+
scale_x_sqrt( breaks=c(0,1000,10000,25000, 50000)) #add commas
```

8. The order of the different levels of a factor variable is important. Describe a scenario where different orders of the levels of a factor variable may lead to different results. (Hint: Think about how factor variables are treated a regression analysis.)

Response: A different order of the levels in a factor variable could result in a different reference level in the results that the software returns for a regression model as the first level as specified in the order of levels is automatically set to be the reference level.

9. The `race_eth` variable in the NLSY dataset is numeric. In the dataset you loaded, we already turned it into a factor variable (`race_eth_cat`). Show the code you would use to do this.

```{r}
nlsy$race_eth_cat <- factor(nlsy$race_eth, levels = c(1, 2, 3), 
                                     labels = c("hispanic", "black", "Non-Black, Non-Hispanic"))
```

10. Create a new variable called `race_reor`, reordering the levels such that "Non-Black, Non-Hispanic" would automatically be used as reference level in analyses. Use a function to check the order of these two variables.

```{r}
nlsy <- nlsy |> mutate(race_reor=fct_relevel(race_eth, "Non-Black, Non-Hispanic", "hispanic", "black"))

count(nlsy,race_eth )
count(nlsy, race_reor)
```

11. Age of individuals contained in the NLSY dataset ranges from 13 to 52 years (variable: age_bir). Use `case_when()` to create the following age categories: teenager (13-19), young adult (20-29), adult (30-52). Make sure it is a correctly labeled factor variable (hint: this can be a two step process).

```{r}
nlsy <- nlsy |> mutate(age_cat=case_when(age_bir <=19 ~ 1, age_bir>=20 & age_bir<=29 ~ 2, age_bir>=30 ~ 3)) 
nlsy <- nlsy |> mutate(age_cat=factor(nlsy$age_cat, levels = c(1, 2, 3), labels = c("teenager", "young adult", "adult")))
```

