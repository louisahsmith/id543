---
title: "Day 1"
format: 
  revealjs:
    theme: solarized
execute: 
  cache: true
---

## 

```{css}
/* Custom fonts */

@import url('https://fonts.googleapis.com/css?family=Permanent+Marker&display=swap');
@import url(https://fonts.googleapis.com/css?family=Noto+Sans);
@import url(https://fonts.googleapis.com/css?family=Source+Code+Pro:400,700);
@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@100;300&display=swap);
@import url(https://fonts.googleapis.com/css2?family=Raleway:wght@900&display=swap);


.huge-number {
 font-family: "Raleway", sans-serif;
 font-size: 1700%;
 font-weight: 900;
 color: #c88d90;
 margin-top: 0;
 margin-left: 50px;
}

/* Handwriting */
.hand{
  font-family: "Permanent Marker", cursive;
  font-size: 125%;
}
.hand-large{
  font-family: "Permanent Marker", cursive;
  font-size: 300%;
}
/* Custom boxes */
.discussion, .your-turn, .take-home {
  padding: 5px 5px;
  margin-top: 5px;
  margin-bottom: 5px;
}
.discussion{
  border-left: solid 5px #A49E9D;
  background-color: #A49E9D30;
}
.discussion:before{
  content: "Discussion";
  font-size: 150%;
  font-weight: bold;
  color: #7A8387;
  margin-bottom: 10px;
}
.your-turn {
  border-left: solid 5px #F4DBB3;
  background-color: #F4DBB330;
  font-size: 25px;
}
.your-turn:before{
  content: "Your turn!";
  font-size: 150%;
  font-weight: bold;
  color: #A58D7F;
  margin-bottom: 10px;
}
.take-home {
  border-left: solid 5px #A49E9D;
  background-color: #A49E9D30;
}
.take-home:before{
  content: "Take home";
  font-size: 150%;
  font-weight: bold;
  color: #7A8387;
  margin-bottom: 10px;
}
.go, .go-side{
  padding: 10px;
  border-left: solid 10px #c88d90;
  background-color: #F2D7D890;
  color: #c88d90;
  margin-top: 25px;
}
.go {
  position: absolute;
  left: 50%;
  transform: translate(-50%, 0%);
}
.exercise {
  margin-top: 75px;
  margin-bottom: 75px;
  margin-right: 20px;
  padding-left: 10px;
  padding-right: 10px;
  display: table;
  border-left: solid 20px #c88d90;
  background-color: #FFFFFF;
  font-size: 150%;
  font-family: Montserrat;
}
.take-home {
  border-left: solid 5px #A49E9D;
  background-color: #A49E9D30;
}
.take-home:before{
  content: "Take home";
  font-size: 150%;
  font-weight: bold;
  color: #7A8387;
  margin-bottom: 10px;
}

.demo{
  font-family: "Permanent Marker";
  border-left: solid 10px #756bb1;
  background-color: #756bb130;
  opacity:50%;
  font-size:130%;
  padding: 10px;
  color: #756bb1;
  margin-top: 25px;
}

.footnote {
  position: absolute;
  bottom: .05em;
  padding-right: 4em;
  font-size: 70%;
  color: #777;
  left:5%;
}

.footnote {
  bottom: 5%;
  left: 5%;
  position: absolute;
  color: #777; 
}

.pull-left {
  float: left;
  width: 49%;
}
.pull-right {
  float: right;
  width: 48%;
}
.pull-right ~ * {
  clear: both;
}
.left-code {
  width: 40%;
  height: 92%;
  float: left;
}
.right-plot {
  width: 58%;
  float: right;
  padding-left: 1%;
}
.left-code {
  width: 40%;
  height: 92%;
  float: left;
}
.right-plot {
  width: 58%;
  float: right;
  padding-left: 1%;
}
.small-code{
font-size: smaller;
margin-left: -20px;
    margin-right: -40px;
}
div.sourceCode {
    height: fit-content !important;
}
```

```{r data, include = FALSE}
reveal <- function(name, num) {
  content <- knitr:::knit_code$get(name)
  last_line <- which(stringr::str_detect(content, "\\+"))[num]
  if (is.na(last_line)) last_line <- length(content)
  if (num == 1) {
    first_line <- 1
    } else {
    first_line <- which(stringr::str_detect(content, "\\+"))[num - 1] + 1
    }
  content[last_line] <- stringr::str_remove(content[last_line], "\\+")
  new_lines <- paste0(content[first_line:last_line], " #<<")
  orig_lines <- if (num == 1) 0 else 1:(first_line - 1)
  c(content[orig_lines], new_lines)
}


# for use when highlighting some parts of code 
# with backticks so that it doesn't run
# include another code block with chunk option 
# code = repeat_code("first-chunk-name")
repeat_code <- function(name) {
  content <- knitr:::knit_code$get(name)
  str_remove_all(content, "`")
}
library(tidyverse)
nlsy <- read_csv(here::here("data", "nlsy_cc.csv")) |> 
  mutate(eyesight_cat = factor(eyesight, labels = c("Excellent", "Very Good",
               "Good", "Fair", "Poor")),
    glasses_cat = factor(glasses, labels = c("Doesn't wear glasses",
                     "Wears glasses/contacts")))
```

::: hand-large
Let's make our data...
:::

::: larger
beautiful
:::

## #goals

```{r goals-plot-1}
ggplot(data = nlsy) +
  geom_bar(aes(x = eyesight, 
          fill = factor(eyesight))) +
  facet_grid(
    cols = vars(glasses),
    labeller = labeller(glasses = c(
      "0" = "Doesn't wear glasses",
      "1" = "Wears glasses/contacts"))) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_continuous(
    labels = c("Excellent", "Very Good",
               "Good", "Fair", "Poor"),
    breaks = c(1, 2, 3, 4, 5)) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(
      angle = 45, vjust = 1, hjust = 1)
    ) +
  labs(title = "Eyesight in NLSY",
       x = "Eyesight quality",
       y = NULL) +
  coord_cartesian(expand = FALSE)
```

## #goals

```{r goals-plot-2}
ggplot(data = nlsy, aes(x = income, 
    y = age_bir, col = factor(sex))
) +
  geom_point(alpha = 0.1) +
  scale_color_brewer(palette = "Set1",
    name = "Sex",
    labels = c("Male", "Female")) +
  scale_x_log10(labels = 
                  scales::dollar) +
  geom_smooth(aes(
    group = factor(sex)), 
    method = "lm") +
  facet_grid(rows = vars(race_eth),
    labeller = labeller(race_eth = c(
    "1" = "Hispanic",
    "2" = "Black",
    "3" = "Non-Black, Non-Hispanic"))) +
  theme_minimal() +
  theme(legend.position = "top") +
  labs(title = "Relationship between income and age at first birth",
    subtitle = "by sex and race",
    x = "Income",
    y = "Age at first birth")
```

## ggplot builds figures by adding on pieces via a particular "*g* rammar of *g* raphics"

::: center
![](../img/grammar.png)
:::


## Basic structure of a ggplot {.smaller}

```         
ggplot(data = {data}, aes(x = {xvar}, y = {yvar}, <characteristic> = {othvar}, ...)) +
      <geom>(<characteristic> = "value", ...) + 
      ...
```
-   `{data}`: must be a dataframe (or tibble!)
-   `{xvar}` and `{yvar}` are the names (unquoted) of the variables on the x- and y-axes
    - some graphs may not require both, or may require other parameters
-   `{othvar}` is some other unquoted variable name that defines a grouping or other characteristic you want to map to an aesthetic
-   `<characteristic>`: you can map `{othvar}` (or a fixed `"value"`) to any of a number of aesthetic features of the figure; e.g., color, shape, size, linetype, etc.
-   `<geom>`: the geometric feature you want to use; e.g., point (scatterplot), line, histogram, bar, etc.
-   `"value"`: a fixed value that defines some characteristic of the figure; e.g., "red", 10, "dashed"
-   ... : there are numerous other options to discover!

## {.smaller}

`ggplot()` doesn't plot any data itself, it just sets up the data and variables

```{r}
#| output-location: column
#| code-line-numbers: true
#| echo: true
#| fig-asp: .85
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat))
```

## {.smaller}

- `geom_bar()` creates a bar graph for the number of observations with a certain value of the `x` variable
  - does not need a `y` variable

```{r}
#| output-location: column
#| code-line-numbers: "3"
#| echo: true
#| fig-asp: .85
#| fig-width: "3in"
#| out.width: "75%"
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar()
```

::: {.callout-tip}
use `geom_col()` if you have a `y` variable that you want to use as the height of the bars
:::


## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "4-8"
#| echo: true
#| fig-asp: .85
ggplot(data = nlsy, aes(x = eyesight_cat, 
                        fill = eyesight_cat)) +
  geom_bar() +
  facet_grid(cols = vars(glasses_cat))
```

- `facet_grid()` creates a panel for each value of another variable
  - can also do `rows = `
  - variable name should be within `vars()` (for reasons we'll get to later!)

::: {.callout-tip}
use `facet_wrap()` if you want to create panels that expand along rows and columns (e.g., to facet by many countries)
:::

## {.smaller}
```{r}
#| output-location: column
#| code-line-numbers: "9-10"
#| echo: true
#| fig-asp: .85
ggplot(data = nlsy) + 
  geom_bar(aes(x = eyesight, 
               fill = factor(eyesight))) +
  facet_grid(
    cols = vars(glasses),
    labeller = labeller(glasses = c(
      "0" = "Doesn't wear glasses",
      "1" = "Wears glasses/contacts"))) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1)
```

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "11-14"
#| echo: true
#| fig-asp: .85
ggplot(data = nlsy) + 
  geom_bar(aes(x = eyesight, 
               fill = factor(eyesight))) +
  facet_grid(
    cols = vars(glasses),
    labeller = labeller(glasses = c(
      "0" = "Doesn't wear glasses",
      "1" = "Wears glasses/contacts"))) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_continuous(
    labels = c("Excellent", "Very Good",
               "Good", "Fair", "Poor"),
    breaks = c(1, 2, 3, 4, 5))
```

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "15"
#| echo: true
#| fig-asp: .85
ggplot(data = nlsy) + 
  geom_bar(aes(x = eyesight, 
               fill = factor(eyesight))) +
  facet_grid(
    cols = vars(glasses),
    labeller = labeller(glasses = c(
      "0" = "Doesn't wear glasses",
      "1" = "Wears glasses/contacts"))) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_continuous(
    labels = c("Excellent", "Very Good",
               "Good", "Fair", "Poor"),
    breaks = c(1, 2, 3, 4, 5)) +
  theme_minimal()
```

## {.smaller}
```{r}
#| output-location: column
#| code-line-numbers: "16-18"
#| echo: true
#| fig-asp: .85
ggplot(data = nlsy) + 
  geom_bar(aes(x = eyesight, 
               fill = factor(eyesight))) +
  facet_grid(
    cols = vars(glasses),
    labeller = labeller(glasses = c(
      "0" = "Doesn't wear glasses",
      "1" = "Wears glasses/contacts"))) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_continuous(
    labels = c("Excellent", "Very Good",
               "Good", "Fair", "Poor"),
    breaks = c(1, 2, 3, 4, 5)) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(
          angle = 45, vjust = 1, hjust = 1))
```

## {.smaller}
```{r}
#| output-location: column
#| code-line-numbers: "19-21"
#| echo: true
#| fig-asp: .85
ggplot(data = nlsy) + 
  geom_bar(aes(x = eyesight, 
               fill = factor(eyesight))) +
  facet_grid(
    cols = vars(glasses),
    labeller = labeller(glasses = c(
      "0" = "Doesn't wear glasses",
      "1" = "Wears glasses/contacts"))) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_continuous(
    labels = c("Excellent", "Very Good",
               "Good", "Fair", "Poor"),
    breaks = c(1, 2, 3, 4, 5)) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(
          angle = 45, vjust = 1, hjust = 1)) +
  labs(title = "Eyesight in NLSY",
       x = "Eyesight quality",
       y = NULL)
```

## {.smaller}

```{r}
#| output-location: column
#| code-line-numbers: "22"
#| echo: true
#| fig-asp: .85
ggplot(data = nlsy) + 
  geom_bar(aes(x = eyesight, 
               fill = factor(eyesight))) +
  facet_grid(
    cols = vars(glasses),
    labeller = labeller(glasses = c(
      "0" = "Doesn't wear glasses",
      "1" = "Wears glasses/contacts"))) +
  scale_fill_brewer(palette = "Spectral",
                    direction = -1) +
  scale_x_continuous(
    labels = c("Excellent", "Very Good",
               "Good", "Fair", "Poor"),
    breaks = c(1, 2, 3, 4, 5)) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(
          angle = 45, vjust = 1, hjust = 1)) +
  labs(title = "Eyesight in NLSY",
       x = "Eyesight quality",
       y = NULL) +
  coord_cartesian(expand = FALSE)
```

## Basic example

```         
ggplot(data = {data}) +
      <geom>(aes(x = {xvar}, y = {yvar}, <characteristic> = {othvar}, ...),
             <characteristic> = "value", ...) +
      ...
```

## Basic example

```         
ggplot(data = nlsy) +
      <geom>(aes(x = {xvar}, y = {yvar}, <characteristic> = {othvar}, ...),
             <characteristic> = "value", ...) +
      ...
```

::: large
The `data =` argument must be a dataframe (or tibble)
:::

## Basic example {.r-fit-text}

```         
ggplot(data = nlsy) +
      geom_bar(aes(x = {xvar}, y = {yvar},
            <characteristic> = {othvar}, ...),
            <characteristic> = "value", ...) +
      ...
```

- `geom_bar()` creates a bar graph for the number of observations with a certain value of the `x` variable
  - does not need a `y` variable
- use `geom_col()` if you have a variable that you want to use as the height of the bars


::: {.callout-tip}
## Other helpful "geoms"

`geom_line()`, `geom_point()`, `geom_histogram()`, `geom_boxplot()`
:::


## 

```{r, echo = FALSE, out.width = "95%", fig.align="center"}
knitr::include_graphics("../img/geoms.png")
```

<!-- - A helpful reference can also be found here: http://sape.inf.usi.ch/quick-reference/ggplot2/geom -->

::: footnote
Image via https://nbisweden.github.io/RaukR-2019/ggplot/presentation/ggplot_presentation.html
:::

## Basic example

```         
ggplot(data = nlsy) +
      geom_point(aes(x = `income`, y = `age_bir`, <characteristic> = {othvar}, ...),
             <characteristic> = "value", ...) +
      ...
```

`geom_point()` requires an `x =` and a `y =` variable

Other geoms require other arguments - For example, `geom_histogram()` only requires an `x =` variable

::: center
::: go
Notice that the variable names are not in quotation marks
:::
:::

## Basic example

```         
ggplot(data = nlsy, `aes(x = income, y = age_bir, <characteristic> = {othvar}, ...)`) +
      geom_point(<characteristic> = "value", ...) +
      ...
```

We could also put the aesthetics (the variables that are being mapped to the plot) in the initial `ggplot()` function

-   This will be helpful when we want multiple geoms (say, points and a line)

## 

::: left-code
```{r point-ex1, fig.show = "hide"}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir))
```

::: large
What if we want to change the color of the points?
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex1%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r point-ex2, fig.show = "hide"}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir),
             color = "blue") #<<
```

::: large
When we put `color =` *outside* the `aes()`, it means we're giving it a specific color value that applies to all the points.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex2%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r point-ex3, fig.show = "hide"}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir),
             color = "#3d93c8") #<<
```

::: center
::: go
One of my favorite color resources: https://www.color-hex.com
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex3%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r point-ex6, fig.show = "hide"}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir,
                 color = eyesight)) #<<
```

::: large
When we put `color =` *inside* the `aes()` -- with no quotation marks -- it means we're telling it how it should assign colors.

Here we're plotting the values according to eyesight, where 1 is excellent and 5 is poor.

-   But they're kind of hard to distinguish!
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex6%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r point-ex7, fig.show = "hide"}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir,
               color = eyesight)) +
scale_color_gradient(low = "green", #<<
                    high = "purple") #<<
```

::: large
We can map the values of `eyesight` to a different continuous scale using `scale_color_gradient()`

You can read lots more about this function \[here
:::

(https://ggplot2.tidyverse.org/reference/scale_gradient.html), so you don't have to have such ugly color scales! \]
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex7%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r point-ex8, fig.show = "hide"}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir,
            color = eyesight))
```

::: large
Returning to the nice blues, we think: But wait! The variable `eyesight` isn't really continuous: it has 5 discrete values.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex8%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r, fig.show = "hide", eval = FALSE}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir,
            color = `factor(eyesight)`))
```

```{r point-ex9, fig.show = "hide", echo = FALSE}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir,
            color = factor(eyesight)))
```

::: large
Returning to the nice blues, we think: But wait! The variable `eyesight` isn't really continuous: it has 5 discrete values.

We can make R treat it as a "factor", or categorical variable, with the `factor()` function
:::

::: center
::: go
We'll see lots more on factors later!
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex9%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r point-ex10, fig.show = "hide"}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir,
            color = factor(eyesight))) +
scale_color_manual( #<<
    values = c("blue", "purple", "red",  #<<
               "green", "yellow"))  #<<
```

::: large
Now if we want to change the color scheme, we have to use a different function.

Before we used `scale_color_gradient`, now `scale_color_manual`.

-   There are a lot of options that follow the same naming scheme.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex10%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r point-ex11, fig.show = "hide"}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir,
            color = factor(eyesight))) +
scale_color_brewer(palette = "Set1")  #<<
```

::: large
There are tons of different options in R for color palettes.

You can play around with those in the `RColorBrewer` package here: http://colorbrewer2.org
:::

-   You can access the scales in that package with `scale_color_brewer()`, or see them all after installing the package with `RColorBrewer::display.brewer.all()`
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex11%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r point-ex12, fig.show = "hide", tidy = FALSE}
ggplot(data = nlsy) +
geom_point(aes(x = income, y = age_bir,
            color = factor(eyesight))) +
scale_color_brewer(palette = "Set1", 
            name = "Eyesight",  #<<
            labels = c("Excellent", #<<
                       "Very Good", #<<
                       "Good", #<<
                       "Fair", #<<
                       "Poor")) #<<
```

::: large
Each of the `scale_color_x()` functions has a lot of the same arguments.
:::

::: center
::: go
Make sure if you are labelling a factor variable in a plot like this that you get the names right!
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22point-ex12%22,%20%22png%22)%60)
:::

## 

::: pull-left
::: huge-number
1
:::
:::

::: hand-large
Your turn...
:::

::: exercise
Exercises 2.1: Make a fancy scatterplot showing the relationship between sleep on weekdays and on weekends.
:::

<!-- 1. Using the NLSY data, make a scatter plot of the relationship between hours of sleep on weekends and weekdays. Color it according to region (where 1 = northeast, 2 = north central, 3 = south, and 4 = west). -->

<!-- 2. Replace `geom_point()` with `geom_jitter()`. What does this do? Why might this be a good choice for this graph? Play with the `width = ` and `height = ` options. This site may help: https://ggplot2.tidyverse.org/reference/geom_jitter.html -->

<!-- 3. Use the `shape = ` argument to map the sex variable to different shapes. Change the shapes to squares and diamonds. (Hint: how did we manually change colors to certain values? This might help: https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) -->

## Facets

One of the most useful features of `ggplot2` is the ability to "facet" a graph by splitting it up according to the values of some variable.

You might use this to show results for a lot of outcomes or exposures at once, for example, or see how some relationship differs by something like age or geographic region

::: center
![scale=80%](../img/facets.png)
:::

## 

::: left-code
```{r bar-ex, fig.show = "hide", echo = FALSE}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings")
```

```{r, eval = FALSE}
ggplot(data = nlsy) +
  `geom_bar(aes`(x = nsibs)) +
  labs(x = "Number of siblings")
```

::: large
We'll introduce bar graphs at the same time!

Notice how we only need an `x =` argument - the y-axis is automatically the count with this geom.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-ex%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r bar-ex1, fig.show = "hide"}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings") +
  facet_grid(cols = vars(region)) #<<
```

::: large
The `facet_grid()` function splits up the data according to a variable(s).

Here we've split it by region into columns.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-ex1%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r bar-ex2, fig.show = "hide", echo = FALSE}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings") +
  facet_grid(rows = vars(region))
```

```{r, eval = FALSE}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings") +
  facet_grid(`rows` = vars(region))
```

::: large
Since this is hard to read, we'll probably want to split by rows instead.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-ex2%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r bar-ex3, fig.show = "hide", echo = FALSE}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings") +
  facet_grid(rows = vars(region),
             margins = TRUE)
```

```{r, eval = FALSE}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings") +
  facet_grid(rows = vars(region),
             `margins = TRUE`)
```

::: large
We can also add a row for all of the data together.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-ex3%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r bar-ex4, fig.show = "hide", echo = FALSE}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings") +
  facet_grid(rows = vars(region),
             margins = TRUE,
             scales = "free_y")
```

```{r, eval = FALSE}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings") +
  facet_grid(rows = vars(region),
             margins = TRUE,
             `scales = "free_y"`)
```

::: large
This squishes the other rows though! We can allow them all to have their own axis limits with the `scales =` argument.

Other options are "free_x" if we want to allow the x-axis scale to vary, or just "free" to combine both.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-ex4%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r bar-ex5, fig.show = "hide"}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings") +
  facet_wrap(vars(region)) #<<
```

::: large
We can use `facet_wrap()` instead, if we want to use both multiple rows and columns for all the values of a variable.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-ex5%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r bar-ex6, fig.show = "hide"}
ggplot(data = nlsy) +
  geom_bar(aes(x = nsibs)) +
  labs(x = "Number of siblings") +
  facet_wrap(vars(region),
             ncol = 3) #<<
```

::: center
::: go
It tries to make a good decision, but you can override how many columns you want!
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-ex6%22,%20%22png%22)%60)
:::

# Wait, these look like histograms!

When we have a variable with a lot of possible values, we may want to bin them with a histogram

```{r, out.width = "50%", fig.height=4.5}
ggplot(nlsy) +
  geom_histogram(aes(x = income))
```

# `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.

We used discrete values with `geom_bar()`, but with `geom_histogram()` we're combining values: the default is into 30 bins.

This is one of the most common warning messages I get in R! <br>

```{r, out.width = "50%", echo = FALSE, fig.align = "center"}
knitr::include_graphics("https://www.washingtonpost.com/pbox.php?url=http://www.washingtonpost.com/news/volokh-conspiracy/wp-content/uploads/sites/14/2015/08/Warning-2.gif&w=1484&op=resize&opt=1&filter=antialias&t=20170517")
```

## 

::: left-code
```{r bar-hist, fig.show = "hide"}
ggplot(data = nlsy) +
  geom_histogram(aes(x = income), 
                 bins = 10) #<<
```

::: center
::: go
We can use `bins =` instead, if we want!
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-hist%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r bar-hist2, fig.show = "hide"}
ggplot(data = nlsy) +
  geom_histogram(aes(x = income), 
                 bins = 100) #<<
```

::: center
::: go
Be aware that you may interpret your data differently depending on how you bin it!
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-hist2%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r bar-hist3, fig.show = "hide"}
ggplot(data = nlsy) +
  geom_histogram(aes(x = income), 
                 binwidth = 1000) #<<
```

::: center
::: go
Sometimes the bin width actually has some meaning
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-hist3%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r bar-hist4, fig.show = "hide"}
ggplot(data = nlsy) +
  geom_histogram(aes(x = income),
                 bins = 100) +
  scale_x_log10() #<<
```

There are a lot of `scale_x_()` and `scale_y_()` functions for you to explore!

::: center
::: go
The naming schemes work similarly to the `scale_color` ones, just with different options!
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22bar-hist4%22,%20%22png%22)%60)
:::

## 

::: pull-left
::: huge-number
2
:::
:::

::: hand-large
Your turn...
:::

::: exercise
Exercises 2.2: Make a fancy histogram showing the distribution of income in this data.
:::

<!-- 1. When we're comparing distributions with very different numbers of observations, instead of scaling the y-axis like we did with the `facet_grid()` function, we might want to make density histograms. Use google to figure out how to make a density histogram of income. Facet it by region. -->

<!-- 2. Make each of the regions in your histogram from part 1 a different color. (Hint: compare what `col = ` and `fill = ` do to histograms). -->

<!-- 3. Instead of a log-transformed x-axis, make a square-root transformed x-axis. -->

<!-- 4. Doing part 3 squishes the labels on the x-axis. Using the `breaks = ` argument that all the `scale_x_()` functions have, make labels at 1000, 10000, 25000, and 50000. -->

## 

# Finally, themes to make our plots prettier

You probably recognize the ggplot theme. But did you know you can trick people into thinking you made your figures in Stata?

::: columns
::: {.column width="49%"}
```{r, echo = FALSE, out.width = "85%"}
ggplot(data = nlsy) +
  geom_histogram(aes(x = income),
                 bins = 100) +
  scale_x_log10()
```
:::

::: {.column width="48%"}
```{r, echo = FALSE, out.width = "85%"}
ggplot(data = nlsy) +
  geom_histogram(aes(x = income),
                 bins = 100) +
  scale_x_log10() +
  ggthemes::theme_stata()
```
:::
:::

## 

::: left-code
```{r theme, fig.show = "hide"}
p <- ggplot(data = nlsy) + #<<
  geom_boxplot(aes(
    x = factor(sleep_wknd), 
    y = sleep_wkdy,
    fill = factor(sleep_wknd))) +
  scale_fill_discrete(guide = FALSE) +
  labs(x = "hours slept on weekends",
       y = "hours slept on weekends",
       title = "The more people sleep on weekends, the more they\n sleep on weekdays",
       subtitle = "According to NLSY data")

p
```

Let's store our plot first.

Plots work just like other R objects, meaning we can use the assignment arrow.

::: center
::: go
Can you figure out what each chunk of this code is doing to the figure?
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22theme%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r theme2, fig.show = "hide"}
p +
  theme_minimal() #<<
```

::: large
We can change the overall theme

::: center
.go\[Since we stored the plot as `p`, it's easy to add on / try different things
:::
:::

\]
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22theme2%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r theme3, fig.show = "hide"}
p +
  theme_dark() #<<
```
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22theme3%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r theme4, fig.show = "hide"}
p +
  theme_classic() #<<
```
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22theme4%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r theme5, fig.show = "hide"}
p +
  theme_void() #<<
```
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22theme5%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r themegga, fig.show = "hide"}
p +
  ggthemes::theme_fivethirtyeight() #<<
```

::: large
Other packages may contain themes.
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22themegga%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r themeggb, fig.show = "hide"}
p +
  ggthemes::theme_excel_new() #<<
```

::: large
In case you miss Excel....
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22themeggb%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r themeggc, fig.show = "hide"}
p +
  ggthemes::theme_gdocs() #<<
```
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22themegga%22,%20%22png%22)%60)
:::

## 

::: left-code
```{r theme6, fig.show = "hide"}
p +
  louisahstuff::my_theme() #<<
```

::: center
::: go
You can even make your own!
:::
:::
:::

::: right-plot
![](%60r%20knitr::fig_chunk(%22theme6%22,%20%22png%22)%60)
:::

## Finally, save it!

If your data changes, you can easily run the whole script again:

```{r, eval = FALSE}
library(tidyverse)
dataset <- read_csv("dataset.csv")
ggplot(dataset) + 
  geom_point(aes(x = xvar, y = yvar))
`ggsave`(filename = "scatterplot.pdf")
```

The `ggsave()` function will automatically save the most recent plot in your output.

To be safe, you can store your plot, e.g., `p <- ggplot(...) + ...` and then

```{r, eval = FALSE}
ggsave(filename = "scatterplot.pdf", plot = p)
```

## More resources

::: left-col
-   Cheat sheet: https://www.rstudio.com/resources/cheatsheets/#ggplot2
-   Catalog: http://shiny.stat.ubc.ca/r-graph-catalog/
-   Cookbook: http://www.cookbook-r.com/Graphs/
-   Official package reference: https://ggplot2.tidyverse.org/index.html
-   List of themes and instructions to make your own: https://www.datanovia.com/en/blog/ggplot-themes-gallery/
:::

::: right-col
![](../img/ggplot2.jpg)
:::

## 

::: pull-left
::: huge-number
3
:::
:::

::: hand-large
Your turn...
:::

::: exercise
Exercises 2.3: Recreate this plot!

<!-- Work through gradually filling in things to build up -->

```{r, echo = FALSE, out.width = "55%", fig.align = "left"}
ggplot(nlsy, aes(nsibs, age_bir, col = factor(region))) +
  geom_jitter(alpha = 0.3) +
  geom_smooth(method = "loess", se = FALSE) +
  labs(title = "Relationship between family size and age at first birth",
       subtitle = "By U.S. Region, with Loess curves",
       x = "Number of siblings",
       y = "Age at first birth") +
  scale_color_viridis_d(labels = c("Northeast", "North Central", "South", "West"),
                        name = "Region") +
  facet_grid(cols = vars(sex),
             labeller = labeller(sex = c("1" = "Male", "2" = "Female"))) +
  theme_minimal() +
  theme(legend.position = "bottom")
```
:::
