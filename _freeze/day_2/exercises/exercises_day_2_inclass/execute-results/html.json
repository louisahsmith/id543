{
  "hash": "572df8b160c88db758bf9718a4c77a75",
  "result": {
    "markdown": "---\ntitle: \"Day 2 Solutions\"\nexecute: \n  eval: true\n  error: true\n---\n\n\nDownload this document [here](_exercises_day_2_inclass.qmd).\n\n# Install quarto\n\n1.  Download quarto [here](https://quarto.org/docs/get-started/).\n\n2.  Render this **document** using the *button* at the top of the document.\n\n3.  Switch back and forth between Visual and Source mode.\n\n4.  Change `execute: eval:` to `true` at the top of the document. Try to render it.\n\n5.  Add `format: docx` to the top of the document and render.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nnlsy <- read_rds(\"https://github.com/louisahsmith/id543/raw/main/data/nlsy.rds\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in readRDS(con, refhook = refhook): URL\n'https://github.com/louisahsmith/id543/raw/main/data/nlsy.rds': status was\n'Couldn't resolve host name'\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in readRDS(con, refhook = refhook): cannot open the connection to 'https://github.com/louisahsmith/id543/raw/main/data/nlsy.rds'\n```\n:::\n:::\n\n\n# Exercises 1: Making new variables with `mutate()`\n\n## Standardized income\n\nUsing the NLSY data and `mutate()`, make a standardized (centered at the mean, and divided by the standard deviation) version of income. Look at this variable using `summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# replace the ... with your code\nnlsy <- mutate(nlsy, \n               income_mean_centered = income - mean(income),\n               income_stand = income_mean_centered / sd(income_mean_centered))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nsummary(nlsy$income_stand)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n:::\n\n\n## Standardized log(income)\n\nDo the same thing, but using income on the log scale. Look at this variable using `summary()`. Can you figure out what happened? (Hint: look at your log(income) variable.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- mutate(nlsy, \n               log_income = log(income),\n               log_income_mean_centered = log_income - mean(log_income),\n               log_income_stand = log_income_mean_centered / sd(log_income_mean_centered))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nsummary(nlsy$log_income)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nmean(nlsy$log_income)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(nlsy, starts_with(\"sleep\") & ends_with(\"d\"), ends_with(\"y\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n:::\n\n\n\n# Exercises 2: Selecting variables using `select()`\n\n## Select centered variables\n\nCreate mean-centered versions of `age_bir`, `nsibs`, `income`, and the two sleep variables. Use the same ending (e.g., `cent`) for all of them. Then make a new dataset of just the centered variables using `select()` and a helper.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- mutate(nlsy,\n               age_bir_cent = age_bir - mean(age_bir),\n               nsibs_cent = nsibs - mean(nsibs),\n               income_cent = income - mean(income),\n               sleep_wkdy_cent = sleep_wkdy - mean(sleep_wkdy),\n               sleep_wknd_cent = sleep_wknd - mean(sleep_wknd))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nnlsy_new <- select(nlsy, ends_with(\"cent\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nnlsy_new\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy_new' not found\n```\n:::\n:::\n\n\n## Selecting based on a vector\n\nCreate a dataset called `nlsy_orig` that contains only the raw variables, using a vector of names and the `all_of()` helper. I'll start you off with the variable names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames_orig <- c(\"glasses\", \"eyesight\", \"sleep_wkdy\", \"sleep_wknd\",\n                   \"id\", \"nsibs\", \"samp\", \"race_eth\", \"sex\", \"region\", \n                   \"income\", \"res_1980\", \"res_2002\", \"age_bir\", \"dob\")\nnlsy_orig <- select(nlsy, any_of(colnames_orig))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n:::\n\n\n## Selecting another way\n\nCan you come up with another way to end up with the same raw variables? (Hint: what do the added variables have in common?)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(nlsy, -ends_with(\"cent\"), -contains(\"cat\"), -contains(\"income\"), income)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nselect(nlsy, -eyesight_cat:sleep_wknd_cent)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n7 %in% c(4, 6, 7, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n# Exercises 3: Subset your data with `filter()`\n\n### \"Or\" conditions\n\nCreate a dataset with all the observations that get over 7 hours of sleep on both weekends and weekdays *or* who have an income greater than/equal to 20,000 and less than/equal to 50,000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_or <- filter(nlsy, \n                  (sleep_wkdy > 7 & sleep_wknd > 7) |\n                    (income >= 20000 & income <= 50000))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nnlsy_or <- filter(nlsy, \n                  (sleep_wkdy > 7 & sleep_wknd > 7) |\n                    between(income, 20000, 50000))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nsummary(select(nlsy_or, starts_with(\"sleep\"), income))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy_or' not found\n```\n:::\n\n```{.r .cell-code}\nnrow(nlsy_or)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy_or' not found\n```\n:::\n:::\n\n\n### Missing values\n\nCreate a dataset that consists *only* of the missing values in `slp_cat_wkdy`. Check how many rows it has (there should be 3!).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_data <- filter(nlsy, is.na(slp_cat_wkdy))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nnew_data\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'new_data' not found\n```\n:::\n:::\n\n\nWe can remove those with NA values by using `filter(nlsy, !is.na(slp_cat_wkdy))`.\n\n## `case_when()`\n\nTry again to make a new variable for standardized log-income. This time, if you are not able to calculate log(income) for an observation, replace it with a missing value (using `case_when()`). This time, when you standardize log(income), you'll have to use `na.rm = TRUE` to remove missing values both when you take the mean and the standard deviation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- mutate(nlsy,\n               log_income = case_when(\n                 income <= 0 ~ NA,\n                 .default = income\n               ),\n               log_income_cent = log_income - mean(log_income, na.rm = TRUE),\n               log_income_stand = log_income_cent / sd(log_income_cent, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nsummary(nlsy$log_income_stand)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n:::\n\n\n# Exercises 4: Pipes\n\nTranslate this code into a piped version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy2 <- mutate(nlsy, \n                slp_cat_wkdy = case_when(\n                  sleep_wkdy < 5 ~ \"little\",\n                  sleep_wkdy < 7 ~ \"some\",\n                  sleep_wkdy < 9 ~ \"ideal\",\n                  sleep_wkdy < 12 ~ \"lots\",\n                  TRUE ~ NA_character_))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nmissing_sleep <- filter(nlsy2, is.na(slp_cat_wkdy))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy2' not found\n```\n:::\n\n```{.r .cell-code}\nmissing_sleep <- select(missing_sleep, starts_with(\"slp\"), contains(\"sleep\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'missing_sleep' not found\n```\n:::\n\n```{.r .cell-code}\nmissing_sleep\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'missing_sleep' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_sleep <- nlsy |>  \n  mutate(slp_cat_wkdy = case_when(\n                  sleep_wkdy < 5 ~ \"little\",\n                  sleep_wkdy < 7 ~ \"some\",\n                  sleep_wkdy < 9 ~ \"ideal\",\n                  sleep_wkdy < 12 ~ \"lots\",\n                  TRUE ~ NA_character_)) |> \n  filter(is.na(slp_cat_wkdy)) |> \n  select(starts_with(\"slp\"), contains(\"sleep\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nmissing_sleep\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'missing_sleep' not found\n```\n:::\n:::\n\n\nCan you rearrange this sequence of steps into a different order and get the same answer?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_sleep <- nlsy |> \n  select(starts_with(\"slp\"), contains(\"sleep\")) |>  \n  mutate(slp_cat_wkdy = case_when(\n                  sleep_wkdy < 5 ~ \"little\",\n                  sleep_wkdy < 7 ~ \"some\",\n                  sleep_wkdy < 9 ~ \"ideal\",\n                  sleep_wkdy < 12 ~ \"lots\",\n                  TRUE ~ NA_character_)) |> \n  filter(is.na(slp_cat_wkdy))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nmissing_sleep\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'missing_sleep' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_sleep <- nlsy %>% \n  filter(sleep_wkdy >= 12) %>%\n  select(starts_with(\"slp\"), contains(\"sleep\")) %>%  \n  mutate(slp_cat_wkdy = case_when(\n                  sleep_wkdy < 5 ~ \"little\",\n                  sleep_wkdy < 7 ~ \"some\",\n                  sleep_wkdy < 9 ~ \"ideal\",\n                  sleep_wkdy < 12 ~ \"lots\",\n                  TRUE ~ NA_character_))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'nlsy' not found\n```\n:::\n\n```{.r .cell-code}\nmissing_sleep %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'missing_sleep' not found\n```\n:::\n:::\n",
    "supporting": [
      "exercises_day_2_inclass_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}