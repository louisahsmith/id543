{
  "hash": "c2b6451ddac885ebf558dc9d2a17ef86",
  "result": {
    "markdown": "---\ntitle: \"Day 2 Exercises\"\nexecute: \n  eval: false\n---\n\n\nDownload this document [here](_exercises_day_2.qmd).\n\n# Install quarto\n\n1.  Download quarto [here](https://quarto.org/docs/get-started/).\n\n2.  Render this document using the button at the top of the document.\n\n3.  Switch back and forth between Visual and Source mode.\n\n4. Change `execute: eval:` to `true` at the top of the document. Try to render it.\n\n5. Add `error: true` directly below the `eval: true` statement. What happens now?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nnlsy <- read_rds(\"https://github.com/louisahsmith/id543/raw/main/data/nlsy.rds\")\n```\n:::\n\n\n# Exercises 1: Making new variables with `mutate()`\n\n## Standardized income\n\nUsing the NLSY data and `mutate()`, make a standardized (centered at the mean, and divided by the standard deviation) version of income. Look at this variable using `summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# replace the ... with your code\nnlsy <- mutate(nlsy, income_stand = ...)\n\nsummary(nlsy$income_stand)\n```\n:::\n\n\n## Standardized log(income)\n\nDo the same thing, but using income on the log scale. Look at this variable using `summary()`. Can you figure out what happened? (Hint: look at your log(income) variable.)\n\n\n::: {.cell}\n\n:::\n\n\n# Exercises 2: Selecting variables using `select()`\n\n## Select centered variables\n\nCreate mean-centered versions of `age_bir`, `nsibs`, `income`, and the two sleep variables. Use the same ending (e.g., `cent`) for all of them. Then make a new dataset of just the centered variables using `select()` and a helper.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- mutate(nlsy,\n               age_bir_cent = ...,\n               nsibs_cent = ...,\n               ...)\nnlsy_new <- select(nlsy, ...)\n```\n:::\n\n\n## Selecting based on a vector\n\nCreate a dataset called `nlsy_orig` that contains only the raw variables, using a vector of names and the `all_of()` helper. I'll start you off with the variable names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames_orig <- c(\"glasses\", \"eyesight\", \"sleep_wkdy\", \"sleep_wknd\",\n                   \"id\", \"nsibs\", \"samp\", \"race_eth\", \"sex\", \"region\", \n                   \"income\", \"res_1980\", \"res_2002\", \"age_bir\")\n```\n:::\n\n\n## Selecting another way\n\nCan you come up with another way to end up with the same raw variables? (Hint: what do the added variables have in common?)\n\n\n::: {.cell}\n\n:::\n\n\n# Exercises 3: Subset your data with `filter()`\n\n### \"Or\" conditions\n\nCreate a dataset with all the observations that get over 7 hours of sleep on both weekends and weekdays *or* who have an income greater than/equal to 20,000 and less than/equal to 50,000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_or <- filter(nlsy, ...)\n```\n:::\n\n\n### Missing values\n\nCreate a dataset that consists *only* of the missing values in `slp_cat_wkdy`. Check how many rows it has (there should be 3!).\n\n\n::: {.cell}\n\n:::\n\n\n## `case_when()`\n\nTry again to make a new variable for standardized log-income. This time, if you are not able to calculate log(income) for an observation, replace it with the missing value `NA` (using `case_when()`). This time, when you standardize log(income), you'll have to use `na.rm = TRUE` to remove missing values both when you take the mean and the standard deviation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- mutate(nlsy,\n               log_income_stand = case_when(\n                 ...\n               ))\n```\n:::\n\n\n# Exercises 4: Pipes\n\nTranslate this code into a piped version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy2 <- mutate(nlsy, \n                slp_cat_wkdy = case_when(\n                  sleep_wkdy < 5 ~ \"little\",\n                  sleep_wkdy < 7 ~ \"some\",\n                  sleep_wkdy < 9 ~ \"ideal\",\n                  sleep_wkdy < 12 ~ \"lots\",\n                  TRUE ~ NA_character_))\nmissing_sleep <- filter(nlsy2, is.na(slp_cat_wkdy))\nmissing_sleep <- select(missing_sleep, starts_with(\"slp\"), contains(\"sleep\"))\nmissing_sleep\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_sleep <- nlsy %>% ...\n```\n:::\n\n\nCan you rearrange this sequence of steps into a different order and get the same answer?\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "exercises_day_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}