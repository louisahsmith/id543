{
  "hash": "572df8b160c88db758bf9718a4c77a75",
  "result": {
    "markdown": "---\ntitle: \"Day 2 Solutions\"\nexecute: \n  eval: true\n  error: true\n---\n\n\nDownload this document [here](_exercises_day_2_inclass.qmd).\n\n# Install quarto\n\n1.  Download quarto [here](https://quarto.org/docs/get-started/).\n\n2.  Render this **document** using the *button* at the top of the document.\n\n3.  Switch back and forth between Visual and Source mode.\n\n4.  Change `execute: eval:` to `true` at the top of the document. Try to render it.\n\n5.  Add `format: docx` to the top of the document and render.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nnlsy <- read_rds(\"https://github.com/louisahsmith/id543/raw/main/data/nlsy.rds\")\n```\n:::\n\n\n# Exercises 1: Making new variables with `mutate()`\n\n## Standardized income\n\nUsing the NLSY data and `mutate()`, make a standardized (centered at the mean, and divided by the standard deviation) version of income. Look at this variable using `summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# replace the ... with your code\nnlsy <- mutate(nlsy, \n               income_mean_centered = income - mean(income),\n               income_stand = income_mean_centered / sd(income_mean_centered))\nsummary(nlsy$income_stand)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-1.1470 -0.6969 -0.3101  0.0000  0.3534  4.4798 \n```\n:::\n:::\n\n\n## Standardized log(income)\n\nDo the same thing, but using income on the log scale. Look at this variable using `summary()`. Can you figure out what happened? (Hint: look at your log(income) variable.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- mutate(nlsy, \n               log_income = log(income),\n               log_income_mean_centered = log_income - mean(log_income),\n               log_income_stand = log_income_mean_centered / sd(log_income_mean_centered))\nsummary(nlsy$log_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   -Inf   8.700   9.320    -Inf   9.903  11.225 \n```\n:::\n\n```{.r .cell-code}\nmean(nlsy$log_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -Inf\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(nlsy, starts_with(\"sleep\") & ends_with(\"d\"), ends_with(\"y\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,205 × 3\n   sleep_wknd sleep_wkdy slp_cat_wkdy\n        <dbl>      <dbl> <chr>       \n 1          7          5 some        \n 2          7          6 some        \n 3          9          7 ideal       \n 4          7          6 some        \n 5         10         10 lots        \n 6          8          7 ideal       \n 7          8          8 ideal       \n 8          8          8 ideal       \n 9          8          7 ideal       \n10          8          8 ideal       \n# ℹ 1,195 more rows\n```\n:::\n:::\n\n\n\n# Exercises 2: Selecting variables using `select()`\n\n## Select centered variables\n\nCreate mean-centered versions of `age_bir`, `nsibs`, `income`, and the two sleep variables. Use the same ending (e.g., `cent`) for all of them. Then make a new dataset of just the centered variables using `select()` and a helper.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- mutate(nlsy,\n               age_bir_cent = age_bir - mean(age_bir),\n               nsibs_cent = nsibs - mean(nsibs),\n               income_cent = income - mean(income),\n               sleep_wkdy_cent = sleep_wkdy - mean(sleep_wkdy),\n               sleep_wknd_cent = sleep_wknd - mean(sleep_wknd))\nnlsy_new <- select(nlsy, ends_with(\"cent\"))\nnlsy_new\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,205 × 5\n   age_bir_cent nsibs_cent income_cent sleep_wkdy_cent sleep_wknd_cent\n          <dbl>      <dbl>       <dbl>           <dbl>           <dbl>\n 1       -4.45      -0.937       7101.          -1.64           -0.267\n 2        6.55      -2.94       19711.          -0.643          -0.267\n 3       -6.45       3.06       -8062.           0.357           1.73 \n 4        7.55      -0.937      32711.          -0.643          -0.267\n 5       -4.45      -1.94      -10779.           3.36            2.73 \n 6        6.55      -1.94       34711.           0.357           0.733\n 7        3.55      -2.94        4711.           1.36            0.733\n 8        0.552      2.06        8611.           1.36            0.733\n 9       -2.45      -2.94        8000.           0.357           0.733\n10       12.6       -2.94       19711.           1.36            0.733\n# ℹ 1,195 more rows\n```\n:::\n:::\n\n\n## Selecting based on a vector\n\nCreate a dataset called `nlsy_orig` that contains only the raw variables, using a vector of names and the `all_of()` helper. I'll start you off with the variable names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames_orig <- c(\"glasses\", \"eyesight\", \"sleep_wkdy\", \"sleep_wknd\",\n                   \"id\", \"nsibs\", \"samp\", \"race_eth\", \"sex\", \"region\", \n                   \"income\", \"res_1980\", \"res_2002\", \"age_bir\", \"dob\")\nnlsy_orig <- select(nlsy, any_of(colnames_orig))\n```\n:::\n\n\n## Selecting another way\n\nCan you come up with another way to end up with the same raw variables? (Hint: what do the added variables have in common?)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(nlsy, -ends_with(\"cent\"), -contains(\"cat\"), -contains(\"income\"), income)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,205 × 14\n   glasses eyesight sleep_wkdy sleep_wknd    id nsibs  samp race_eth   sex\n     <dbl>    <dbl>      <dbl>      <dbl> <dbl> <dbl> <dbl>    <dbl> <dbl>\n 1       0        1          5          7     3     3     5        3     2\n 2       1        2          6          7     6     1     1        3     1\n 3       0        2          7          9     8     7     6        3     2\n 4       1        3          6          7    16     3     5        3     2\n 5       0        3         10         10    18     2     1        3     1\n 6       1        2          7          8    20     2     5        3     2\n 7       0        1          8          8    27     1     5        3     2\n 8       1        1          8          8    49     6     5        3     2\n 9       1        2          7          8    57     1     5        3     2\n10       0        1          8          8    67     1     1        3     1\n# ℹ 1,195 more rows\n# ℹ 5 more variables: region <dbl>, res_1980 <dbl>, res_2002 <dbl>,\n#   age_bir <dbl>, income <dbl>\n```\n:::\n\n```{.r .cell-code}\nselect(nlsy, -eyesight_cat:sleep_wknd_cent)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in x:y: numerical expression has 28 elements: only the first used\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,205 × 29\n   glasses eyesight sleep_wkdy sleep_wknd    id nsibs  samp race_eth   sex\n     <dbl>    <dbl>      <dbl>      <dbl> <dbl> <dbl> <dbl>    <dbl> <dbl>\n 1       0        1          5          7     3     3     5        3     2\n 2       1        2          6          7     6     1     1        3     1\n 3       0        2          7          9     8     7     6        3     2\n 4       1        3          6          7    16     3     5        3     2\n 5       0        3         10         10    18     2     1        3     1\n 6       1        2          7          8    20     2     5        3     2\n 7       0        1          8          8    27     1     5        3     2\n 8       1        1          8          8    49     6     5        3     2\n 9       1        2          7          8    57     1     5        3     2\n10       0        1          8          8    67     1     1        3     1\n# ℹ 1,195 more rows\n# ℹ 20 more variables: region <dbl>, income <dbl>, res_1980 <dbl>,\n#   res_2002 <dbl>, age_bir <dbl>, eyesight_cat <fct>, glasses_cat <fct>,\n#   race_eth_cat <fct>, sex_cat <fct>, slp_cat_wkdy <chr>,\n#   income_mean_centered <dbl>, income_stand <dbl>, log_income <dbl>,\n#   log_income_mean_centered <dbl>, log_income_stand <dbl>, age_bir_cent <dbl>,\n#   nsibs_cent <dbl>, income_cent <dbl>, sleep_wkdy_cent <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n7 %in% c(4, 6, 7, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n# Exercises 3: Subset your data with `filter()`\n\n### \"Or\" conditions\n\nCreate a dataset with all the observations that get over 7 hours of sleep on both weekends and weekdays *or* who have an income greater than/equal to 20,000 and less than/equal to 50,000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_or <- filter(nlsy, \n                  (sleep_wkdy > 7 & sleep_wknd > 7) |\n                    (income >= 20000 & income <= 50000))\nnlsy_or <- filter(nlsy, \n                  (sleep_wkdy > 7 & sleep_wknd > 7) |\n                    between(income, 20000, 50000))\nsummary(select(nlsy_or, starts_with(\"sleep\"), income))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   sleep_wkdy       sleep_wknd     sleep_wkdy_cent   sleep_wknd_cent  \n Min.   : 3.000   Min.   : 4.000   Min.   :-3.6432   Min.   :-3.2672  \n 1st Qu.: 7.000   1st Qu.: 7.000   1st Qu.: 0.3568   1st Qu.:-0.2672  \n Median : 8.000   Median : 8.000   Median : 1.3568   Median : 0.7328  \n Mean   : 7.425   Mean   : 7.953   Mean   : 0.7814   Mean   : 0.6856  \n 3rd Qu.: 8.000   3rd Qu.: 8.000   3rd Qu.: 1.3568   3rd Qu.: 0.7328  \n Max.   :13.000   Max.   :14.000   Max.   : 6.3568   Max.   : 6.7328  \n     income     \n Min.   :    0  \n 1st Qu.: 9000  \n Median :21000  \n Mean   :20723  \n 3rd Qu.:30000  \n Max.   :70000  \n```\n:::\n\n```{.r .cell-code}\nnrow(nlsy_or)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 530\n```\n:::\n:::\n\n\n### Missing values\n\nCreate a dataset that consists *only* of the missing values in `slp_cat_wkdy`. Check how many rows it has (there should be 3!).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_data <- filter(nlsy, is.na(slp_cat_wkdy))\nnew_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 29\n  glasses eyesight sleep_wkdy sleep_wknd    id nsibs  samp race_eth   sex region\n    <dbl>    <dbl>      <dbl>      <dbl> <dbl> <dbl> <dbl>    <dbl> <dbl>  <dbl>\n1       0        1         12         12  5913    11    13        2     2      1\n2       0        2         12         12  6357    12    13        2     2      3\n3       0        1         13         13 10259     4    13        2     2      1\n# ℹ 19 more variables: income <dbl>, res_1980 <dbl>, res_2002 <dbl>,\n#   age_bir <dbl>, eyesight_cat <fct>, glasses_cat <fct>, race_eth_cat <fct>,\n#   sex_cat <fct>, slp_cat_wkdy <chr>, income_mean_centered <dbl>,\n#   income_stand <dbl>, log_income <dbl>, log_income_mean_centered <dbl>,\n#   log_income_stand <dbl>, age_bir_cent <dbl>, nsibs_cent <dbl>,\n#   income_cent <dbl>, sleep_wkdy_cent <dbl>, sleep_wknd_cent <dbl>\n```\n:::\n:::\n\n\nWe can remove those with NA values by using `filter(nlsy, !is.na(slp_cat_wkdy))`.\n\n## `case_when()`\n\nTry again to make a new variable for standardized log-income. This time, if you are not able to calculate log(income) for an observation, replace it with a missing value (using `case_when()`). This time, when you standardize log(income), you'll have to use `na.rm = TRUE` to remove missing values both when you take the mean and the standard deviation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- mutate(nlsy,\n               log_income = case_when(\n                 income <= 0 ~ NA,\n                 .default = income\n               ),\n               log_income_cent = log_income - mean(log_income, na.rm = TRUE),\n               log_income_stand = log_income_cent / sd(log_income_cent, na.rm = TRUE))\nsummary(nlsy$log_income_stand)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n-1.1553 -0.7064 -0.3132  0.0000  0.3678  4.4766       9 \n```\n:::\n:::\n\n\n# Exercises 4: Pipes\n\nTranslate this code into a piped version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy2 <- mutate(nlsy, \n                slp_cat_wkdy = case_when(\n                  sleep_wkdy < 5 ~ \"little\",\n                  sleep_wkdy < 7 ~ \"some\",\n                  sleep_wkdy < 9 ~ \"ideal\",\n                  sleep_wkdy < 12 ~ \"lots\",\n                  TRUE ~ NA_character_))\nmissing_sleep <- filter(nlsy2, is.na(slp_cat_wkdy))\nmissing_sleep <- select(missing_sleep, starts_with(\"slp\"), contains(\"sleep\"))\nmissing_sleep\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  slp_cat_wkdy sleep_wkdy sleep_wknd sleep_wkdy_cent sleep_wknd_cent\n  <chr>             <dbl>      <dbl>           <dbl>           <dbl>\n1 <NA>                 12         12            5.36            4.73\n2 <NA>                 12         12            5.36            4.73\n3 <NA>                 13         13            6.36            5.73\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_sleep <- nlsy |>  \n  mutate(slp_cat_wkdy = case_when(\n                  sleep_wkdy < 5 ~ \"little\",\n                  sleep_wkdy < 7 ~ \"some\",\n                  sleep_wkdy < 9 ~ \"ideal\",\n                  sleep_wkdy < 12 ~ \"lots\",\n                  TRUE ~ NA_character_)) |> \n  filter(is.na(slp_cat_wkdy)) |> \n  select(starts_with(\"slp\"), contains(\"sleep\"))\nmissing_sleep\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  slp_cat_wkdy sleep_wkdy sleep_wknd sleep_wkdy_cent sleep_wknd_cent\n  <chr>             <dbl>      <dbl>           <dbl>           <dbl>\n1 <NA>                 12         12            5.36            4.73\n2 <NA>                 12         12            5.36            4.73\n3 <NA>                 13         13            6.36            5.73\n```\n:::\n:::\n\n\nCan you rearrange this sequence of steps into a different order and get the same answer?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_sleep <- nlsy |> \n  select(starts_with(\"slp\"), contains(\"sleep\")) |>  \n  mutate(slp_cat_wkdy = case_when(\n                  sleep_wkdy < 5 ~ \"little\",\n                  sleep_wkdy < 7 ~ \"some\",\n                  sleep_wkdy < 9 ~ \"ideal\",\n                  sleep_wkdy < 12 ~ \"lots\",\n                  TRUE ~ NA_character_)) |> \n  filter(is.na(slp_cat_wkdy))\nmissing_sleep\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  slp_cat_wkdy sleep_wkdy sleep_wknd sleep_wkdy_cent sleep_wknd_cent\n  <chr>             <dbl>      <dbl>           <dbl>           <dbl>\n1 <NA>                 12         12            5.36            4.73\n2 <NA>                 12         12            5.36            4.73\n3 <NA>                 13         13            6.36            5.73\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_sleep <- nlsy %>% \n  filter(sleep_wkdy >= 12) %>%\n  select(starts_with(\"slp\"), contains(\"sleep\")) %>%  \n  mutate(slp_cat_wkdy = case_when(\n                  sleep_wkdy < 5 ~ \"little\",\n                  sleep_wkdy < 7 ~ \"some\",\n                  sleep_wkdy < 9 ~ \"ideal\",\n                  sleep_wkdy < 12 ~ \"lots\",\n                  TRUE ~ NA_character_))\nmissing_sleep %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n slp_cat_wkdy         sleep_wkdy      sleep_wknd    sleep_wkdy_cent\n Length:3           Min.   :12.00   Min.   :12.00   Min.   :5.357  \n Class :character   1st Qu.:12.00   1st Qu.:12.00   1st Qu.:5.357  \n Mode  :character   Median :12.00   Median :12.00   Median :5.357  \n                    Mean   :12.33   Mean   :12.33   Mean   :5.690  \n                    3rd Qu.:12.50   3rd Qu.:12.50   3rd Qu.:5.857  \n                    Max.   :13.00   Max.   :13.00   Max.   :6.357  \n sleep_wknd_cent\n Min.   :4.733  \n 1st Qu.:4.733  \n Median :4.733  \n Mean   :5.066  \n 3rd Qu.:5.233  \n Max.   :5.733  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}