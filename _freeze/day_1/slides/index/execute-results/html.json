{
  "hash": "92cf7fbb1f6854dc231eae6a4a81e239",
  "result": {
    "markdown": "---\ntitle: \"Day 1\"\nformat: \n  revealjs:\n    slide-number: c/t\n    preview-links: auto\n    hash-type: number\n    hash-one-based-index: true\n    theme: \n      - custom.scss\n    pointer:\n      - color: '#32cd32'\nrevealjs-plugins:\n  - pointer\n---\n\n::: {.cell}\n\n```{.scss .cell-code}\n/* needs to go here to overwrite callouts */\n\n$white:    #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #eee !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #aaa !default;\n$gray-600: #777 !default;\n$gray-700: #495057 !default;\n$gray-800: #333 !default;\n$gray-900: #222 !default;\n$black:    #000 !default;\n\n$blue:    #eb6864 !default;\n$indigo:  #6610f2 !default;\n$purple:  #6f42c1 !default;\n$pink:    #e83e8c !default;\n$red:     #f57a00 !default;\n$orange:  #fd7e14 !default;\n$yellow:  #f5e625 !default;\n$green:   #22b24c !default;\n$teal:    #20c997 !default;\n$cyan:    #369 !default;\n\n$bs-body-color: $gray-900 !default;\n$bs-link-color: $blue !default;\n$bs-code-color: $pink !default;\n\n$primary:       $blue !default;\n$secondary:     $gray-500 !default;\n$success:       $green !default;\n$info:          $cyan !default;\n$warning:       $yellow !default;\n$danger:        $red !default;\n$light:         $gray-100 !default;\n$dark:          $gray-900 !default;\n\n$callout-color-note: $secondary !default;\n$callout-color-tip: $pink !default;\n$callout-color-caution: $yellow !default;\n$callout-color-warning: $danger !default;\n$callout-color-important: $primary !default;\n\n/* Callout Types */\n\ndiv.callout-note {\n  border-left-color: $secondary !important;\n}\ndiv.callout-note.callout-style-default .callout-caption {\n  background-color: lighten($secondary, 40%) !important;\n}\ndiv.callout-important {\n  border-left-color: $primary !important;\n}\ndiv.callout-important.callout-style-default .callout-caption {\n  background-color: lighten($primary, 40%) !important;\n}\ndiv.callout-warning {\n  border-left-color: $danger !important;\n}\ndiv.callout-warning.callout-style-default .callout-caption {\n  background-color: lighten($danger, 40%) !important;\n}\ndiv.callout-tip {\n  border-left-color: $success !important;\n}\n  div.callout-tip.callout-style-default .callout-caption {\n  background-color: lighten($success, 40%) !important;\n}\n```\n\n\n<style type=\"text/css\">\ndiv.callout-note{border-left-color:#aaa !important}div.callout-note.callout-style-default .callout-caption{background-color:#fff !important}div.callout-important{border-left-color:#eb6864 !important}div.callout-important.callout-style-default .callout-caption{background-color:#fff !important}div.callout-warning{border-left-color:#f57a00 !important}div.callout-warning.callout-style-default .callout-caption{background-color:#ffe0c2 !important}div.callout-tip{border-left-color:#22b24c !important}div.callout-tip.callout-style-default .callout-caption{background-color:#b0f0c3 !important}\n</style>\n:::\n\n\n## \n\n\n\n\n\nbeautiful data\n\n## #goals\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat)) +\n  geom_bar() +\n  facet_grid(cols = vars(glasses_cat)) +\n  scale_fill_brewer(palette = \"Spectral\",\n                    direction = -1) +\n  scale_x_discrete(breaks = c(\"Excellent\", \n                              \"Good\", \"Poor\"),\n                   name = \"Eyesight quality\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(\n          angle = 45, vjust = 1, hjust = 1)) +\n  labs(title = \"Eyesight in NLSY\",\n       y = NULL) +\n  coord_cartesian(expand = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/goals-plot-1-1.png){width=672}\n:::\n:::\n\n\n## #goals\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nlsy, \n       aes(x = income, y = age_bir, \n           color = sex_cat)) +\n  geom_point(alpha = 0.1) +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_x_log10(labels = scales::dollar) +\n  geom_smooth(aes(group = sex_cat), \n              method = \"lm\") +\n  facet_grid(rows = vars(race_eth_cat)) +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  labs(title = \"Relationship between income and age at first birth\",\n    subtitle = \"by sex and race/ethnicity\",\n    color = \"Sex\",\n    x = \"Income\",\n    y = \"Age at first birth\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 9 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/goals-plot-2-1.png){width=672}\n:::\n:::\n\n\n## ggplot builds figures by adding on pieces via a particular \"*g*rammar of *g*raphics\"\n\n::: center\n![](../../img/grammar.png)\n:::\n\n## Basic structure of a ggplot {.smaller}\n\n```         \nggplot(data = {data}, aes(x = {xvar}, y = {yvar}, <characteristic> = {othvar}, ...)) +\n      <geom>(<characteristic> = \"value\", ...) + \n      ...\n```\n-   `{data}`: must be a dataframe (or tibble!)\n-   `{xvar}` and `{yvar}` are the names (unquoted) of the variables on the x- and y-axes\n    - some graphs may not require both, or may require other parameters\n-   `{othvar}` is some other unquoted variable name that defines a grouping or other characteristic you want to map to an aesthetic\n-   `<characteristic>`: you can map `{othvar}` (or a fixed `\"value\"`) to any of a number of aesthetic features of the figure; e.g., color, shape, size, linetype, etc.\n-   `<geom>`: the geometric feature you want to use; e.g., point (scatterplot), line, histogram, bar, etc.\n-   `\"value\"`: a fixed value that defines some characteristic of the figure; e.g., \"red\", 10, \"dashed\"\n-   ... : there are numerous other options to discover!\n\n## {.smaller}\n\n\n::: {.cell output-location='column' fig.asp='0.7'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=576}\n:::\n:::\n\n\n- `ggplot()` doesn't plot any data itself, it just sets up the data and variables\n\n## {.smaller}\n\n\n::: {.cell output-location='column' fig.asp='0.7'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=576}\n:::\n:::\n\n\n- `geom_bar()` creates a bar graph for the number of observations with a certain value of the `x` variable\n  - does not need a `y` variable\n  \n::: {.callout-tip}\nuse `geom_col()` if you have a `y` variable that you want to use as the height of the bars\n:::\n\n\n## {.smaller}\n\n\n::: {.cell output-location='column' fig.asp='0.7'}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat)) +\n  geom_bar() +\n  facet_grid(cols = vars(glasses_cat))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=576}\n:::\n:::\n\n\n- `facet_grid()` creates a panel for each value of another variable\n  - can also do `rows = `\n  - variable name should be within `vars()` (for reasons we'll get to later!)\n\n::: {.callout-tip}\nuse `facet_wrap()` if you want to create panels that expand along rows and columns (e.g., to facet by many countries)\n:::\n\n## {.smaller}\n\n\n::: {.cell output-location='column' fig.asp='0.7'}\n\n```{.r .cell-code  code-line-numbers=\"5-6\"}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat)) +\n  geom_bar() +\n  facet_grid(cols = vars(glasses_cat)) +\n  scale_fill_brewer(palette = \"Spectral\",\n                    direction = -1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=576}\n:::\n:::\n\n\n- `scale_{fill/color}_{...}()` functions change the color palette\n  - some are appropriate for continuous variables, others discrete\n  \n::: {.callout-tip}\n`scale_fill_viridis_d()` good color-blind and black & white-friendly options\n:::\n\n## {.smaller}\n\n\n::: {.cell output-location='column' fig.asp='0.7'}\n\n```{.r .cell-code  code-line-numbers=\"7-9\"}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat)) +\n  geom_bar() +\n  facet_grid(cols = vars(glasses_cat)) +\n  scale_fill_brewer(palette = \"Spectral\",\n                    direction = -1) +\n  scale_x_discrete(breaks = c(\"Excellent\", \n                              \"Good\", \"Poor\"),\n                   name = \"Eyesight quality\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=576}\n:::\n:::\n\n\n- `scale_{x/y}_{...}()` functions change the axis scale and/or labeling\n\n::: {.callout-tip}\n`scale_y_log10()` is helpful when plotting odds or risk ratios\n:::\n\n## {.smaller}\n\n\n::: {.cell output-location='column' fig.asp='0.7'}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat)) +\n  geom_bar() +\n  facet_grid(cols = vars(glasses_cat)) +\n  scale_fill_brewer(palette = \"Spectral\",\n                    direction = -1) +\n  scale_x_discrete(breaks = c(\"Excellent\", \n                              \"Good\", \"Poor\"),\n                   name = \"Eyesight quality\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=576}\n:::\n:::\n\n\n- `theme_{...}()` changes the \"look\" of the plot\n  - but not the data color palette\n\n::: {.callout-tip}\nfind lots of themes and color palettes at <https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/>\n:::\n\n## {.smaller}\n\n\n::: {.cell output-location='column' fig.asp='0.7'}\n\n```{.r .cell-code  code-line-numbers=\"11-13\"}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat)) +\n  geom_bar() +\n  facet_grid(cols = vars(glasses_cat)) +\n  scale_fill_brewer(palette = \"Spectral\",\n                    direction = -1) +\n  scale_x_discrete(breaks = c(\"Excellent\", \n                              \"Good\", \"Poor\"),\n                   name = \"Eyesight quality\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(\n          angle = 45, vjust = 1, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=576}\n:::\n:::\n\n\n- you can also specify any component of the theme directly\n\n::: {.callout-tip}\nlots of arguments can be set to `element_blank()` to get rid of them\n:::\n\n\n## {.smaller}\n\n\n::: {.cell output-location='column' fig.asp='0.7'}\n\n```{.r .cell-code  code-line-numbers=\"14-15\"}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat)) +\n  geom_bar() +\n  facet_grid(cols = vars(glasses_cat)) +\n  scale_fill_brewer(palette = \"Spectral\",\n                    direction = -1) +\n  scale_x_discrete(breaks = c(\"Excellent\", \n                              \"Good\", \"Poor\"),\n                   name = \"Eyesight quality\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(\n          angle = 45, vjust = 1, hjust = 1)) +\n  labs(title = \"Eyesight in NLSY\",\n       y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=576}\n:::\n:::\n\n\n- `labs()` can add subtitles, caption, alt text, as well as label any aesthetics (fill, color, etc.)\n\n::: {.callout-tip}\nthere's a lot of redundancy... we could have specified `x = \"Eyesight quality\"` here instead.\n:::\n\n## {.smaller}\n\n\n::: {.cell output-location='column' fig.asp='0.7'}\n\n```{.r .cell-code  code-line-numbers=\"16\"}\nggplot(data = nlsy, aes(x = eyesight_cat, \n                        fill = eyesight_cat)) +\n  geom_bar() +\n  facet_grid(cols = vars(glasses_cat)) +\n  scale_fill_brewer(palette = \"Spectral\",\n                    direction = -1) +\n  scale_x_discrete(breaks = c(\"Excellent\", \n                              \"Good\", \"Poor\"),\n                   name = \"Eyesight quality\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(\n          angle = 45, vjust = 1, hjust = 1)) +\n  labs(title = \"Eyesight in NLSY\",\n       y = NULL) +\n  coord_cartesian(expand = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=576}\n:::\n:::\n\n\n- `coord_{...}()` functions change the coordinate system\n  - cartesian is already the default, but `expand = FALSE` means there is no extra space beyond the axis limits\n\n::: {.callout-tip}\n`coord_fixed(ratio = 1)` will ensure that 1 unit on the x-axis is the same length as one unit on the y-axis\n:::\n\n\n## How close can we get to this one?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nlsy, \n       aes(x = income, y = age_bir, \n           color = sex_cat)) +\n  geom_point(alpha = 0.1) +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_x_log10(labels = scales::dollar) +\n  geom_smooth(aes(group = sex_cat), \n              method = \"lm\") +\n  facet_grid(rows = vars(race_eth_cat)) +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  labs(title = \"Relationship between income and age at first birth\",\n    subtitle = \"by sex and race/ethnicity\",\n    color = \"Sex\",\n    x = \"Income\",\n    y = \"Age at first birth\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 9 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n##\n\n::: center\n![](../../img/geoms.png)\n:::\n\n<!-- - A helpful reference can also be found here: http://sape.inf.usi.ch/quick-reference/ggplot2/geom -->\n\n::: aside\nImage via <https://nbisweden.github.io/RaukR-2019/ggplot/presentation/ggplot_presentation.html>\n:::\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}