{
  "hash": "049b46c11f917efed6be5b3db96a7eb5",
  "result": {
    "markdown": "---\ntitle: \"Homework 2\"\nformat: docx\norder: 2\n---\n\n\nPlease copy and paste your code and answers into this document and submit on Canvas.\n\n1. Using the NLSY data, make a scatter plot of the relationship between hours of sleep on weekends and weekdays. Color it according to region (where 1 = northeast, 2 = north central, 3 = south, and 4 = west).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#read in data - SF: do we need to include how to read in the data in the homework instructions? or will we cover in class how to read in that specific dataset as you used the same data for your slides\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nnlsy <- read_csv(here::here(\"data\", \"nlsy_cc.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1205 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (14): glasses, eyesight, sleep_wkdy, sleep_wknd, id, nsibs, samp, race_e...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nnlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, \n           color = factor(region))) + geom_point() \n```\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-1-1.png)\n:::\n\n```{.r .cell-code}\n#for all of the following questions, how do you want to handle labeling for grading? would we want nicely labeled graphs or is that not the main point and therefore they can make it pretty with labels etc. if they want but we will not deduct points if they do?\n```\n:::\n\n\n\n2. Replace `geom_point()` with `geom_jitter()`. What does this do? Why might this be a good choice for this graph? Play with the `width = ` and `height = ` options. This site may help: https://ggplot2.tidyverse.org/reference/geom_jitter.html\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nnlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, \n           color = factor(region))) + geom_jitter(width=1, height=1)\n```\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-2-1.png)\n:::\n\n```{.r .cell-code}\nnlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, \n           color = factor(region))) + geom_jitter(width=3, height=3)\n```\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-2-2.png)\n:::\n\n```{.r .cell-code}\n nlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, \n           color = factor(region))) + geom_jitter(width=5, height=5)\n```\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-2-3.png)\n:::\n:::\n\nResponse: With geom_jitter() compared to geom_point(), we can see more plotted dots. This is due to geom_jitter() adding random dots around the observed values. This might help picture what the natural variability of these variables might look like in a bigger sample and indicate the true underlying distribution more accurately. The width and height option relate how far away the random dots may be located from the observed data.\n\n3. Use the `shape = ` argument to map the sex variable to different shapes. Change the shapes to squares and diamonds. (Hint: how did we manually change colors to certain values? This might help: https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#should they use the geom_point or geom_jitter function here?\n#filled square = 15, filled diamond = 18\n\nlibrary(ggplot2)\nnlsy |> ggplot(aes(x = sleep_wknd, y = sleep_wkdy, \n         col = factor(region) )) + geom_point(aes(shape=factor(sex)), size=2.5) + scale_shape_manual(values=c(15, 18))\n```\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-3-1.png)\n:::\n:::\n\n\n\n4. When we're comparing distributions with very different numbers of observations, instead of scaling the y-axis like we did with the `facet_grid()` function, we might want to make density histograms. Use google to figure out how to make a density histogram of income. Facet it by region.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nlsy, aes(x = income)) +\n  geom_histogram(aes(y = ..density..), col = \"black\", fill = \"red\", binwidth=1000) +\n  facet_wrap(vars(region))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-4-1.png)\n:::\n:::\n\n\n5. Make each of the regions in your histogram from part 1 a different color. (Hint: compare what `col = ` and `fill = ` do to histograms).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nlsy, aes(x = income)) +\n  geom_histogram(aes(y = ..density.., fill=factor(region)), col = \"black\", binwidth=1000) +\n  facet_wrap(vars(region))\n```\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-5-1.png)\n:::\n\n```{.r .cell-code}\nggplot(data = nlsy, aes(x = income)) +\n  geom_histogram(aes(y = ..density.., col=factor(region)), binwidth=1000) +\n  facet_wrap(vars(region))\n```\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-5-2.png)\n:::\n:::\n\n\nResponse: The \"col=\" option within geom_histogram() changes the outline color of the bars, the \"fill=\"-option changes the color of area/the fill of the bars.\n\n\n6. Instead of a log-transformed x-axis, make a square-root transformed x-axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nlsy, aes(x = income)) +\n  geom_histogram(aes(y = ..density.., fill=factor(region)), col = \"black\") +\n  facet_wrap(vars(region))+\nscale_x_sqrt()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-6-1.png)\n:::\n:::\n\n\n\n7. Doing part 3 squishes the labels on the x-axis. Using the `breaks = ` argument that all the `scale_x_()` functions have, make labels at 1000, 10000, 25000, and 50000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nlsy, aes(x = income)) +\n  geom_histogram(aes(y = ..density.., fill=factor(region)), col = \"black\") +\n  facet_wrap(vars(region))+\nscale_x_sqrt( breaks=c(0,1000,10000,25000, 50000))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](homework_2_solutions_files/figure-docx/unnamed-chunk-7-1.png)\n:::\n:::\n\n\n8. The order of the different levels of a factor variable is important. Describe a scenario where different orders of the levels of a factor variable may lead to different results. (Hint: Think about how factor variables are treated a regression analysis.)\nComment SF: This may be too advanced. But if the students already know how to run regression analysis in STATA, they might know this. In STATA, the same as in R the lowest/first level is  used as reference level for categorical variables in a regression model as default.\n\nResponse: A different order of the levels in a factor variable could result in a different reference level in the results that the software returns for a regression model as the first level as specified in the order of levels is automatically set to be the reference level.\n\n9. The \"race_eth\"-variable in the NLSY dataset relates to the following level: hispanic (1), black (2), other (3). When loading the data it is a numeric variable. Turn it into a factor variable making sure it is labeled correctly. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy$race_eth <- factor(nlsy$race_eth, levels = c(1, 2, 3), \n                                     labels = c(\"hispanic\", \"black\", \"other\"))\n```\n:::\n\n\n10. Create a new variable called \"race_reor\", reordering the levels such that \"other\" would automatically be used as reference level in analyses. Use the count()-function to check the order of these two variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- nlsy |> mutate(race_reor=fct_relevel(race_eth, \"other\", \"hispanic\", \"black\"))\n\ncount(nlsy,race_eth )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  race_eth     n\n  <fct>    <int>\n1 hispanic   211\n2 black      307\n3 other      687\n```\n:::\n\n```{.r .cell-code}\ncount(nlsy, race_reor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  race_reor     n\n  <fct>     <int>\n1 other       687\n2 hispanic    211\n3 black       307\n```\n:::\n:::\n\n\n11. Age of individuals contained in the NLSY dataset ranges from 13 to 52 years (variable: age_bir). Use case_when() to create the following age categories: teenager (13-19), young adult (20-29), adult (30-52). Make sure it is a correctly labeled factor variable (hint: this can be a two step process).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- nlsy |> mutate(age_cat=case_when(age_bir <=19 ~ 1, age_bir>=20 & age_bir<=29 ~ 2, age_bir>=30 ~ 3)) \nnlsy <- nlsy |> mutate(age_cat=factor(nlsy$age_cat, levels = c(1, 2, 3), labels = c(\"teenager\", \"young adult\", \"adult\")))\n```\n:::\n\n\n\n12. Using the age group factor variable, show the mean age and total number of individuals in each age group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy|> group_by(age_cat) |> summarise(mean_age=mean(age_bir), n=n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  age_cat     mean_age     n\n  <fct>          <dbl> <int>\n1 teenager        17.3   358\n2 young adult     23.7   648\n3 adult           33.7   199\n```\n:::\n:::\n",
    "supporting": [
      "homework_2_solutions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}