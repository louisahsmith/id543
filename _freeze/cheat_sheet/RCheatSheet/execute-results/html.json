{
  "hash": "48da93075427339de1efa7a296782311",
  "result": {
    "markdown": "---\ntitle: Basic R Coding Overview\ndate: June, 2022\nformat:\n  html:\n    toc: true\n    number-sections: true\n    toc-location: left\n---\n\n\n# Tips before you start\n\n- There is a lot of documentation and support available at your fingertips both within R and outside of R on blogs, other educational websites, YouTube and more. \n  - Within R, use the `help` command to get an overview, more options and examples for a specific command. There is also the `search` command where you can type in key words and R will search for these key words.    \n  ```r\n  help(command_name)\n  ?command_name\n  ```\n  - Within the R Help menu, you can select 'PDF Documentation' to access the manuals. \n  - There are also plenty of resources on the R Support site: <http://www.R.com/support/> \n- R is case sensitive (e.g. if a variable is 'ID', you must refer to it as 'ID', not 'id'). ? It is best to save and write your R code in a .do file. \n- Notes/comments can be added for easy annotation of the program. An asterisk at the beginning of the line denotes a comment that can be used interactively. For example:  \n  ```r\n  # This is a note that\n  # R will not read\n  ``` \n- When coding in R, R does not like to read in location paths or datasets that have a space in the name (e.g. R does not like to read in `\"Your path here/name of dataset.dta\"`, and would prefer a file name without spaces, such as: `\"Your_path_here/name_of_dataset.dta\"`). \n- If you only want to run a command for a subset of the data, add `if varname==value` to the end of the command statement (e.g. `summarize age, if gender==1`). \n- If you start to run a command and need to stop the command or prevent more output from appearing, you can select the Break icon in the top-right corner to stop the command. \n- In R 14 and older versions, while executing a command, R will display `--more--` and pause until any key is pressed. To turn off the more message, use the command `set more off`. To turn the message on: `set more on`. From R 15, set more off is now the default option (`help whatsnew14to15 => 71. Set more off now the default`) \n \t \n# Getting started with R \nOpen R 14.0. If you have already been working in R with a different dataset, you can clear the previous working dataset with the following command: \n\n```r\n \n```\n \n## Create and execute a .do file \nA do-file is a file containing a list of commands that can be saved, which allows one to run the same commands in the future to reproduce your work. To open a new .do file, one can: \n\n1) Click on the \"Do-file Editor\" icon located at the top R bar:  \n\n2) Or, go to the menu options: File/New/Do-file, or Window/Do-file Editor/New Do-file Editor. A .do file will open: \n\nThe Do-File Editor acts just like Word or any text editor so that we can type any R commands. \n\nNote that do-file editor has different text colors for specific parts of the R commands: \n\n1) Green: Comments (green arrow) \n2) Red: Character (ex. `\"filename\"`, red arrow) \n3) Blue: R commands (ex. `use`, `clear`, `summarize`, `histogram`, `graph`, `tabulate`, `regress`, blue arrow) \n4) Black: Other aspects of the command (black arrow) \n \nAdditional colors are added to other aspects of the commands. For example, if a command is misspelled (`tablate` rather than `tabulate`), this will not turn blue in the Do-File Editor and you can easily identify the spelling error. \n \nTo run all or a subset of the commands in the Do-File Editor, we can push the button at the top of the Do-File Editor that is labeled \"Execute (Do)\" if you hover over it (orange arrow). If you click this button, all of the commands in the do file will be executed. If you would like to execute only a subset of the commands, you can highlight the commands you would like to execute and then click the button. \n \nTo learn even more details about .do files (ex. more ways to write comments, long lines, error handling, logging the output, preventing -more- conditions, calling other do-files, creating and running do-files for Mac/Windows/Unix, or suppressing output), go the R manual (see Table 1). \n \n## Read in a Dataset (.dta, .xlsx, .csv, and .xpt) \nDatasets can be in various formats, such as .dta (R), .xls (Excel), .csv (Comma Separated Value), and .sas7bdat (SAS) files. There are a few ways to read in these types of dataset files, some of which require you to know the location of the dataset on your computer. To determine the location of a dataset stored on a Windows computer, can right-click and click on 'Properties' and copy and paste the location path. \n\nThe option `, clear` will clear out a dataset if one is already open. If a dataset is open and you do not use the `clear` option and, you will get an error. If you need help or would like to learn more options, you can use the R help command by typing in `help nameofcommandhere`; for example, `help use` or `help import` or `help insheet.`\nHelpful video link: <https://www.youtube.com/watch?v=3CjXMC2hFEA>\n \nAnother option is to use the Stat/Transfer software to convert dataset from various formats into an .dta (R) file. Stat/Transfer is available within the HSPH student's Virtual Desktop Infrastructure (VDI) system \n<https://www.hsph.harvard.edu/information-technology/service/virtual-desktop-infrastructure/>\n<https://www.hsph.harvard.edu/information-technology/frequently-asked-questions/vdifaq/student-vdi-software-inventory/>\n \n### Reading a R .dta file \n\n1\\) Use the `use` command followed by the data location in quotations. The option `, clear` will clear out a dataset if one is already open. If a dataset is open and you do not use the 'clear' option and, you will get an error. \n\n```r\n \n```\n \nOr, 2) tell R the name of your working directory using the 'cd' command and then use the \n'use' command to open the .dta file: \n```r\n \n```\n \nOr, 3) Use the drop-down menu: File/Open/ and then Browse for the R .dta file. \n \n### Importing an Excel file \nThe data should be on the first Excel sheet tab. Use the `import` command to import an Excel file. The option `, firstrow` will tell R to treat the first row of Excel data as variable names. Alternatively, you can use the drop-down menu: File/Import/Excel Spreadsheet/ and browse for the \nExcel file and select the 'Import first row as variable names' option. \n\n```r\n\n```\n \n### Importing a .csv file \nUse the `insheet` command to import a .csv file. \n\n```r\n\n``` \n \n### Reading in a SAS file \nCompared to Excel files, it is not as simple to read in a SAS file to R. R can easily import a SAS XPORT (*.xpt) file using the drop-down menu: File/Import/SAS XPORT and Browse for the \n.xpt file. Or you can use the `import` command below. \n\n```r\n\n``` \n \nIf you have SAS, you can use the proc export command in SAS to output a .dta file or an Excel file. \n\nIf you do not have SAS, then you may need to use the Stat/Transfer software that easily converts a SAS file to a R file. Stat/Transfer is available within the HSPH student's Virtual Desktop \nInfrastructure (VDI) system:\n\n- <https://www.hsph.harvard.edu/information-technology/service/virtual-desktop-infrastructure/>\n- <https://www.hsph.harvard.edu/information-technology/frequently-asked-questions/vdi-faq/studentvdi-software-inventory/>\n\nHelpful link: <https://stats.idre.ucla.edu/other/mult-pkg/faq/how-do-i-use-a-sas-data-file-in-stata/>\n \n## Get to know your data \nOne can get a brief overview of your dataset on the number of observations, the number of variables, variable names, formats, and labels using the `describe` command. This is highly recommended to do! \n\n```r\n\n``` \n \nTo see what the entire dataset looks like, one can select on the \"Data Browser\" icon or use the \"browse\" command. This will open the data browser that will look a lot like an Excel spreadsheet. \n\n```r\n\n``` \n \nTo compactly list the variable names: \n\n```r\n\n``` \n \nTo count the number of observations (i.e. rows of data) in a dataset: \n\n```r\n\n``` \n \nTo count the number of observations in a subset of the data: \n\nCode for character variables: \n```r\n\n```\n\nCode for numeric variables:\n```r\n\n```\n \nOne can use the `codebook` command to print the variable name, label, variable type, range, number of unique values, and some descriptive information. This is very useful for categorical variables. If you do not include a variable name after the `codebook` command, then you will get output for every variable in the dataset. \n\n```r\n\n``` \n \t \n# Basic data management\n## Generate quadratic term \n\n```r\n\n``` \n \n## Generate a categorical variable based on cut-points \nThere are a couple ways to create a categorical variable `'newvar'` based on cutpoint values of `'oldvar'` at cutpoints `x` and `y`. \n\n1) One can use the cut function of the `egen` command to create a new categorical variable with the left-hand ends of the intervals specified in that `at()` option. For example, say you have a variable with a minimum of 0 and a maximum of 100 with some missing values and you would like to make three categories defined by the values [0,x] (category 1), [x,y] (category 2), and [y,100] (category 3). In the `at()` option of the `egen` and `cut` commands, you will want to supply the left- hand breaks: 0, x, y and then a value larger than the maximum. The label option will label each of the levels of the categorical variable with the left-hand break value. <http://www.stata.com/manuals13/degen.pdf>    \n  ```r\n\n  ``` \n  - Example:    \n    ```r\n\n     ```\n2) Use the `generate` and `replace` commands but be aware that R will bin those with missing values in the category with an open-ended greatest than sign unless clearly specified. To generate a new categorical variable based on a set of cutpoints (ex. 40, 60, 80):    \n  ```r\n\n  ``` \n  - Another way:    \n    ```r\n\n     ```\n## Generate quantiles \nUse the `xtile` command to generate a categorical variable based on quantiles cutoffs (for tertiles, use` nquantile(3)`; for quartiles, use `nquantile(4)`; etc. the default is `nquantile(2)`): \n\n```r\n\n```\n \n## Generate an indicator/dummy variable \n1) To generate indicator or dummy variables for a categorical variable, one can use the `generate()` option of the `tabulate` command, where a stem name is included within the parentheses to generate X number of dummy variables. R will use the stem name to create X number of dummy variables starting from `stemname1`-`stemnameX`.    \n  ```r\n\n  ```\n2) One could also code the indicator/dummy variables manually using the `generate` and \n`replace` commands. Again, be aware the R will bin those with missing values in a category and you must specify how to handle those with missing.    \n  ```r\n\n  ```\n \n## Label a new variable \nOne can use the `label variable` command to give a label to a variable: \n```r\n\n``` \n \nOne can also add labels to each level of a categorical variable using both the `label define` and the `label values` commands. Say we have a variable called `newvar` that takes on the values 1, 2, 3, 4, and 5 to represent quintiles. We will define each of the levels of `newvar` and store that information to `newvar_f`; then, we will assign the values of `newvar_f` to the variable newvar. We will check that this worked by using the `codebook` command to see that labels were assigned correctly to the variable and to each level of the categorical variable. \n```r\n\n```\n \n## Sort the data \nThe default of the `sort` command is in ascending order. \n```r\n\n``` \n \nYou can sort on multiple variables to arrange observations in to ascending order based on `varname1`, and within each `varname1` category one can sort into ascending order by `varname2`. \n```r\n\n``` \n \n## Merge two datasets with a single row for each individual \n\nTo merge two datasets, both datasets should be sorted by the identification variable (ex. `idvar`). After running the `merge` command line, a variable `_merge` is created; this can complicate matters if you are merging more than 2 datasets. \n```r\n\n```\n\nIf both datasets are saved in the same folder location:\n```r\n\n```\n\nIf you only want to retain observations that appear in both datasets, one can add the `keep(match)` option to the `merge` command: \n```r\n\n``` \n \n## Keeping and dropping observations \nPlease note that if you keep or drop certain observations, these observations will not be included in any future data management or analyses. \n```r\n\n``` \n\n```r \n\n```\n \t \n\n# Descriptives, statistical tests, and visualization tools\n## Categorical data: frequencies, tests, and association measures \n### One-way frequency table \nOne can get a frequency table as well as the percentages and cumulative percentages for categorical data using the `tabulate` command. To check for those with missing data (i.e. varname==.), one can add the missing option to the tabulate command. \n```r\n\n```\n \nOne can estimate the proportions, standard errors and 95% CI of the proportions using the \n`proportions` command. \n```r\n\n``` \n \n### RxC frequency tables \nOne can easily extend the `tabulate` command to cross-tabulate two categorical variables. There are options in the `tabulate` command to obtain the Pearson's Chi-squared statistic and the Fisher's exact test. \n```r \n\n```\n \n### Two-sample test of proportions \nNote that the binary variable, `varname1`, should be coded 0/1. \n```r\n\n``` \n \n### Estimate measures of association \nOne can estimate the Risk Difference, Risk Ratio, Odds Ratio between two binary variables (coded as \n0/1) using the `cs` (i.e. cohort study) command with the `or` (i.e. Odds Ratio) option. \n```r\n\n``` \n \n### Stratified frequency tables \nIf you want to see frequencies or summary statistics of a variable (ex. `varname1` or `varname3`) within each value of a categorical variable (ex. `categoricalvariable`): \n```r\n\n```\n\nAnother way to code: \n```r\n\n```\n\n## Continuous data: summary statistics, visualization, and statistical tests \n### Measures of location and variance \nUse the `summarize` command to obtain summary statistics for continuous data (ex. mean, minimum, maximum, standard deviation). The detail option provides additional information on the median, variance, the interquartile range values, and the 4 smallest and 4 largest values.\n```r\n\n```\n\nOne can estimate the standard errors and 95% CI of the mean using the `ci` or `ci means` command. \n```r\n\n``` \n \n### Histogram \nA histogram graphics for continuous data \n```r\n\n```\n \n### Box plots \nTo show a box-and-whisker plot of age and a box plot of age by a categorical variable (ex. sex) \n```r\n\n``` \n \n### Scatterplot \nScatterplot of two continuous variables \n```r\n\n```  \n\nMore examples and codes in: <http://www.R.com/support/faqs/graphics/gph/R-graphs/>\n \n### Statistical Tests \nTo conduct a two-sample T-test (normally distributed continuous variable by a binary variable), use the `ttest` command and select the 'unequal' variance option if desired: \n```r\n\n``` \n \nTo conduct a one-way ANOVA (test differences of two or more means), use the `anova` or `oneway` commands: \n```r\n\n``` \n \nTo conduct a non-parametric test Wilcoxon Rank-sum test (aka Mann-Whitney U test) for non- normally distributed data, use the `ranksum` command: \n```r\n\n``` \n \n### Correlation coefficients \nOne can estimate the Pearson correlation coeffecients using either the `correlate` or the `pwcorr` commands, though the output options vary between the two commands. The `correlate` command has several options including to print out the variable descriptive statistics and if you prefer the covariance matrix, you can use the covariance option. The `pwcorr` commands has options to output the number of observations for each comparison and the p-values. \n```r\n\n```\n \nOne can estimate the Spearman correlation coefficients using the `spearman` command. With the `stats()` option, one can output the Spearman correlation coefficients, number of observations and the p-values. \n```r  \n\n``` \n \n# Regression analyses\n## Logistic Regression \n### Using continuous or binary variables\n\nCode to output the beta coefficients:\n```r\n\n``` \n\nCode to output the Odds Ratios:\n```r \n\n``` \n \n### Using indicator variables \nTo model the categorical predictors with indicator variables, one can use the 'i.' function. The default when you use the 'i.' function for indicator variables is that the smallest value is the referent group (i.e. the base level is set to first). \n```r\n\n``` \n \nTo change the referent group, you can 1) use the fvset command, 2) use the `ib#.` operator, or 3) manually generate new indicator variables.\n\n1) Using the fvset command, you have the option to specify the referent group as the lowest level value (first; the default), the highest level value (last), or the most frequent level value (frequent).  \n  - Code to change the referent group:    \n   ````\n2) Using the `ib#.` operator, you can specify the base level of a factor variable by using the ib. operator.  \n  - For more information: <http://www.R.com/manuals13/u11.pdf#u11.4.3.2Baselevels>   \n  - For example, if you have a 3-level exposure variable (low, medium, high), the default referent group is 'low' and would be the same as using the ib0.varname operator. To have 'medium' as the referent group, you can use the ib1.varname operator.  \n  - Code to change the referent group using the ib# operator:    \n  ```r\n\n  ```\n3) You can also manually code the indicator variables to code the desired referent group. \n  - Code to change the referent group manually:    \n  ````\n \n### Stratified Logistic Regression \n\n```r \n\n``` \n \n## Linear Regression \nOne can conduct a linear regression model using the `regress` command with continuous, binary, categorical and indicator variables (see the Logistic Regression section for more information about using indicator variables). \n```r \n\n``` \n \n## Survival Data \n### Set-up \nTell R that the dataset is survival data: \n```r \n\n```\n\n### Graphs \nKM Curves Overall:\n```r\n\n```\n\nKM Curves by exposure groups: \n```r\n\n```\n\nTo add 95% Confidence Interval band and information sample sizes to the figure \n```r\n\n```\n\nLog negative-log survivor plots \n```r \n\n``` \n \n### Summary statistics \nTo see survivor function at various time points overall and by groups: \n```r \n\n```\n\nTo get median and other percentile survival times with confidence intervals: \n```r\n\n``` \n \n### Statistical tests \nLog-Rank Test \n```r \n\n```\n\nWeighted Log-Rank tests (Wilcoxon, Tarone-Ware):\n```r\n\n```\n \n### Cox Regression \nOne can conduct a Cox regression model using the `stcox` command to estimate Hazard Ratios with continuous, binary, categorical and indicator variables (see the Logistic Regression section for more information about using indicator variables). In order for the `stcox` command to work, you must tell R that you are working with survival data by using the `stset` command. The option 'nohr' will output the beta coefficients, not the Hazard Ratios.\n```r\n\n``` \n \nCox Regression with time-varying covariates: \n```r \n\n``` \n \nCompeting Risk Analysis: In carrying out a competing risk analysis, the \"outcome\" variable can take on three values. There must be a value for the actual event of interest (outcome=1); a value for censoring (outcome=0); and a value for the competing risk event (outcome=2).  The `stset` command needs to be given first, in the usual way to identify the event of interest. \n \nCumulative Incidence Curve (you must run the Cox regression first with at least one predictor) \n```r\n\n``` \n\nCox Regression with a Competing Risk \n```r\n\n``` \n \n## Goodness of Fit Statistics \nTo get log Likelihood/AIC/BIC for most recent regression model: \n```r\n\n```\n\nTo run Likelihood Ratio Test comparing two nested models: \n```r\n\n``` \n\n# Additional resources\n\n- Again, the `help` and `search` commands in R can be very informative:   \n  ```r\n  help(command_name)\n  ?command_name\n  ```\n- Other R Support websites, manuals, blogs:\n  - <http://www.R.com/support/>\n  - <https://www.stata-journal.com/>\n  - <http://blog.R.com/>\n  - <https://www.stata.com/features/documentation/>\n  - <https://www.stata.com/bookstore/users-guide/>\n- Other R Cheat Sheets: <https://geocenter.github.io/RTraining/portfolio/01_resource/>\n- UCLA R website: <https://stats.idre.ucla.edu/stata/>\n \n## Creating table 1 in stata \nThese packages may be useful to you for creating a Table 1 in R (showing summary/descriptive statistics.). They are very helpful for your group project and data presentation for publication  \n\n- Make a Table 1 in R in no time with \"table1_mc\" package \n  - <https://blog.uvm.edu/tbplante/2019/07/11/make-a-table-1-in-stata-in-no-time-with-table1_mc/> \n- Make a Table 1 in R with \"basetable\" package \n  - <http://www.bruunisejs.dk/RHacks/basetable/basetable_demo/>\n \n## Table of links to helpful manuals and YouTube videos \n\n|  | R Manual | Helpful YouTube Videos |\n| --- | --- | --- |\n| Getting Started with R | | 6 very nice, short and helpful EdX videos for R beginners: <https://www.youtube.com/playlist?list=PL6p7gIm6aWd-Y1htnfC9QN57fACk8PiCo> |\n| .do files  | <http://www.stata.com/manuals13/u16.pdf> | <https://www.youtube.com/watch?v=6syxC5jJz-s> |\n| Reading in datasets | <http://www.stata.com/manuals13/u21.pdf> | <https://www.youtube.com/watch?v=3CjXMC2hFEA> |\n| Basic Data Management | Creating new variables: <http://www.stata.com/manuals13/gsw11.pdf> | Creating new variables and labels: <https://www.youtube.com/watch?v=geN1eI64rQU&list=PL6p7gIm6aWd-Y1htnfC9QN57fACk8PiCo&index=5> |\n| | egen - Extensions to generate: <http://www.stata.com/manuals13/degen.pdf> | Generating variables using the generate, replace, and label commands: <https://www.youtube.com/watch?v=WX5vbQgfkSc> |\n| | pctile - Create variable containing percentiles: <http://www.stata.com/manuals13/dpc> tile.pdf | |\n| | How do I create dummy variables?: <https://www.stata.com/support/faqs/data-management/creating-dummyvariables/> | |\n| | merge - Merge datasets: <http://www.stata.com/manuals13/dmerge.pdf> | |\n| Descriptives, basic graphs | | Exploratory data analysis: <https://www.youtube.com/watch?v=zt8eX9xcbCo&t=2s&list=PL6p7gIm6aWd-Y1htnfC9QN57fACk8PiCo&index=4> |\n| | | Graphing in stata: <https://www.youtube.com/watch?v=dnnUOCVjF8s&list=PL6p7gIm6aWd-Y1htnfC9QN57fACk8PiCo&index=6> |\n| | |  STATA The Very Basics: <https://www.youtube.com/watch?v=kepM_tbQokw> |\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}