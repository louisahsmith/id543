{
  "hash": "f76b8103ce9a7f9430a321b00d1523cf",
  "result": {
    "markdown": "---\ntitle: \"Introduction to R\"\nformat: revealjs\nexecute: \n  echo: true\norder: 1\n---\n\n\n# Using R Studio\n\n## An IDE for R\n\n::: columns\n::: {.column width=\"50%\"}\n![](https://github.com/rstudio/hex-stickers/blob/main/PNG/RStudio.png?raw=true)\n:::\n\n::: {.column width=\"50%\"}\n\nAn *integrated development environment* is software that makes coding easier\n\n-   see objects you've imported and created\n-   autocomplete\n-   syntax highlighting\n-   run part or all of your code\n:::\n:::\n\n\n---\n::: r-stack\n![](../../img/rstudio.png){height=650}\n\n![](../../img/rstudio-markup.png){.fragment height=650}\n:::\n\n# Demo\n\n## Packages {.smaller}\n\n-   Some functions are built into R\n    -   `mean()`, `lm()`, `table()`, etc.\n-   They actually come from built-in packages\n    -   `base`, `stats`, `graphics`, etc.\n-   Anyone (yes, *anyone*) build their own package to add to the functionality of R\n    -   `{ggplot2}`, `{dplyr}`, `{data.table}`, `{survival}`, etc. ![](../../img/stickers.png)[^1]\n\n[^1]: Image from [Zhi Yang](https://zhiyang.netlify.app/post/hexwall/)\n\n## Packages {.r-fit-text}\n\n-   You have to **install** a package once[^2]\n\n[^2]: Actually, with every new major R release, but we won't worry about that.\n\n``` r\ninstall.packages(\"survival\")\n```\n\n-   You then have to **load** the package every time you want to use it\n\n``` r\nlibrary(survival)\n```\n\n## Packages\n\n\"You only have to buy the book once, but you have to go get it out of the bookshelf every time you want to read it.\"\n\n``` r\ninstall.packages(\"survival\")\nlibrary(survival)\nsurvfit(...)\n```\n\n::: center\n::: hand\nSeveral days later...\n:::\n:::\n\n``` r\nlibrary(survival)\ncoxph(...)\n```\n\n## Package details {.smaller}\n\n-   When you use `install.packages`, packages are downloaded from [CRAN](https://cran.r-project.org) (The Comprehensive R Archive Network)\n    -   This is also where you downloaded R\n-   Packages can be hosted lots of other places, such as [Bioconductor](https://www.bioconductor.org) (for bioinformatics), and [Github](https://www.github.com) (for personal projects or while still developing)\n-   The folks at CRAN check to make things \"work\" in some sense, but don't check on the statistical methods...\n    -   But because R is open-source, you can always read the code yourself\n-   Two functions from different packages can have the same name... if you load them both, you may have some trouble\n\n# Demo\n\n# Using R\n\n## The biggest difference between R and Stata is that R can have many different objects in its environment\n\n- datasets, numbers, figures, etc.\n- you have to be explicit about storing and retrieving objects\n  - e.g., what dataset a variable belongs to\n\n## R uses `<-` to store objects in the environment\n\nI call this the \"assignment arrow\"\n\n::: {.cell}\n\n```{.r .cell-code}\n# create values\nvals <- c(1, 645, 329)\n```\n:::\n\nNow `vals` holds those values\n\n::: callout-warning\nNo assignment arrow means that the object will be printed to the console (and lost forever!)\n:::\n\n## Objects\n\nWe can retrieve those values by running just the name of the object\n\n::: {.cell}\n\n```{.r .cell-code}\nvals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   1 645 329\n```\n:::\n:::\n\nWe can also perform operations on them using functions like `mean()`\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(vals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 325\n```\n:::\n:::\n\nIf we want to keep the result of that operation, we need to use `<-` again\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_val <- mean(vals)\n```\n:::\n\n## Types of data (*classes*)\n\nWe could also create a character *vector*:\n\n::: {.cell}\n\n```{.r .cell-code}\nchars <- c(\"dog\", \"cat\", \"rhino\")\nchars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dog\"   \"cat\"   \"rhino\"\n```\n:::\n:::\n\nOr a *logical* vector:\n\n::: {.cell}\n\n```{.r .cell-code}\nlogs <- c(TRUE, FALSE, FALSE)\nlogs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n:::\n\n::: callout-tip\nWe'll see more options as we go along!\n:::\n\n## Types of objects\n\nWe created *vectors* with the `c()` function (`c` stands for concatenate)\n\nWe could also create a *matrix* of values with the `matrix()` function:\n\n::: {.cell}\n\n```{.r .cell-code}\n# turn the vector of numbers into a 2-row matrix\nmat <- matrix(c(234, 7456, 12, 654, 183, 753), nrow = 2)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]  234   12  183\n[2,] 7456  654  753\n```\n:::\n:::\n\n## Indices\n\nThe numbers in square brackets are *indices*, which we can use to pull out values:\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract second animal\nchars[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cat\"\n```\n:::\n:::\n\nWe can pull out rows or columns from matrices:\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract second row\nmat[2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7456  654  753\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract first column\nmat[, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  234 7456\n```\n:::\n:::\n\n\n# Demo\n",
    "supporting": [
      "intro-to-R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}