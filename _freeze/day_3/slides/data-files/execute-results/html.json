{
  "hash": "7a47345545432bb5e420ded92f1cea57",
  "result": {
    "markdown": "---\ntitle: \"Load and save data\"\nformat: \n  revealjs:\n    theme: \n      - ../../www/custom.scss\norder: 1\nexecute: \n  echo: true\n---\n\n\n## Getting data into R\n\n\n\n\n\nWe read in data as an `.rds` file:\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_rds <- read_rds(\"https://github.com/louisahsmith/id543/raw/main/data/nlsy.rds\")\n```\n:::\n\n\nand as a `.csv` file:\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_csv <- read_csv(\"../../data/nlsy-cc.csv\")\n```\n:::\n\n\n## What do you notice about the differences?\n\n::::columns\n::: {.column width=50%}\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(nlsy_rds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,205\nColumns: 19\n$ glasses      <dbl> 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, …\n$ eyesight     <dbl> 1, 2, 2, 3, 3, 2, 1, 1, 2, 1, 3, 5, 1, 1, 1, 1, 3, 2, 3, …\n$ sleep_wkdy   <dbl> 5, 6, 7, 6, 10, 7, 8, 8, 7, 8, 8, 7, 7, 7, 8, 7, 7, 8, 8,…\n$ sleep_wknd   <dbl> 7, 7, 9, 7, 10, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 4, 8, 8,…\n$ id           <dbl> 3, 6, 8, 16, 18, 20, 27, 49, 57, 67, 86, 96, 97, 98, 117,…\n$ nsibs        <dbl> 3, 1, 7, 3, 2, 2, 1, 6, 1, 1, 7, 2, 7, 2, 2, 4, 9, 2, 2, …\n$ samp         <dbl> 5, 1, 6, 5, 1, 5, 5, 5, 5, 1, 7, 6, 5, 6, 1, 5, 6, 5, 5, …\n$ race_eth     <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ sex          <dbl> 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, …\n$ region       <dbl> 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ income       <dbl> 22390, 35000, 7227, 48000, 4510, 50000, 20000, 23900, 232…\n$ res_1980     <dbl> 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 11, 6, 3…\n$ res_2002     <dbl> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 19, 11, 11, 11, 1…\n$ age_bir      <dbl> 19, 30, 17, 31, 19, 30, 27, 24, 21, 36, 17, 19, 29, 30, 2…\n$ eyesight_cat <fct> Excellent, Very Good, Very Good, Good, Good, Very Good, E…\n$ glasses_cat  <fct> Doesn't wear glasses, Wears glasses/contacts, Doesn't wea…\n$ race_eth_cat <fct> \"Non-Black, Non-Hispanic\", \"Non-Black, Non-Hispanic\", \"No…\n$ sex_cat      <fct> Female, Male, Female, Female, Male, Female, Female, Femal…\n$ slp_cat_wkdy <chr> \"some\", \"some\", \"ideal\", \"some\", \"lots\", \"ideal\", \"ideal\"…\n```\n:::\n:::\n\n:::\n::: {.column width=50%}\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(nlsy_csv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,205\nColumns: 19\n$ glasses      <dbl> 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, …\n$ eyesight     <dbl> 1, 2, 2, 3, 3, 2, 1, 1, 2, 1, 3, 5, 1, 1, 1, 1, 3, 2, 3, …\n$ sleep_wkdy   <dbl> 5, 6, 7, 6, 10, 7, 8, 8, 7, 8, 8, 7, 7, 7, 8, 7, 7, 8, 8,…\n$ sleep_wknd   <dbl> 7, 7, 9, 7, 10, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 4, 8, 8,…\n$ id           <dbl> 3, 6, 8, 16, 18, 20, 27, 49, 57, 67, 86, 96, 97, 98, 117,…\n$ nsibs        <dbl> 3, 1, 7, 3, 2, 2, 1, 6, 1, 1, 7, 2, 7, 2, 2, 4, 9, 2, 2, …\n$ samp         <dbl> 5, 1, 6, 5, 1, 5, 5, 5, 5, 1, 7, 6, 5, 6, 1, 5, 6, 5, 5, …\n$ race_eth     <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ sex          <dbl> 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, …\n$ region       <dbl> 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ income       <dbl> 22390, 35000, 7227, 48000, 4510, 50000, 20000, 23900, 232…\n$ res_1980     <dbl> 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 11, 6, 3…\n$ res_2002     <dbl> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 19, 11, 11, 11, 1…\n$ age_bir      <dbl> 19, 30, 17, 31, 19, 30, 27, 24, 21, 36, 17, 19, 29, 30, 2…\n$ eyesight_cat <chr> \"Excellent\", \"Very Good\", \"Very Good\", \"Good\", \"Good\", \"V…\n$ glasses_cat  <chr> \"Doesn't wear glasses\", \"Wears glasses/contacts\", \"Doesn'…\n$ race_eth_cat <chr> \"Non-Black, Non-Hispanic\", \"Non-Black, Non-Hispanic\", \"No…\n$ sex_cat      <chr> \"Female\", \"Male\", \"Female\", \"Female\", \"Male\", \"Female\", \"…\n$ slp_cat_wkdy <chr> \"some\", \"some\", \"ideal\", \"some\", \"lots\", \"ideal\", \"ideal\"…\n```\n:::\n:::\n\n:::\n::::\n\n## `.rds` is an R-specific file for a single object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(nlsy_rds, \"nlsy.rds\")\n```\n:::\n\n\nYou can save any object, not just a dataframe:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(4, 5, 6)\nwrite_rds(x, \"numbers.rds\")\n```\n:::\n\n\nWhat is `y` going to print?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- read_rds(\"numbers.rds\")\ny\n```\n:::\n\n\n## `.csv` files are much more general but don't maintain things like factors\n\n:::center\n![](../../img/csv.png)\n:::\n\n## `.csv` files might need a little more specification to read in\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"../../data/nlsy.csv\") |> print(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12,686 × 14\n  H0012400 H0012500 H0022300 H0022500 R0000100 R0009100 R0173600 R0214700\n     <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>\n1       -4       -4       -4       -4        1        1        5        3\n2        0        1        4        3        2        8        5        3\n# ℹ 12,684 more rows\n# ℹ 6 more variables: R0214800 <dbl>, R0216400 <dbl>, R0217900 <dbl>,\n#   R0402800 <dbl>, R7090700 <dbl>, T4120500 <dbl>\n```\n:::\n\n```{.r .cell-code}\nnlsy <- read_csv(\"../../data/nlsy.csv\",\n                 skip = 1,\n                 col_names = c(\"glasses\", \"eyesight\", \"sleep_wkdy\", \"sleep_wknd\", \n                               \"id\", \"nsibs\", \"samp\", \"race_eth\", \"sex\", \"region\", \n                               \"income\", \"res_1980\", \"res_2002\", \"age_bir\"))\nprint(nlsy, n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12,686 × 14\n  glasses eyesight sleep_wkdy sleep_wknd    id nsibs  samp race_eth   sex region\n    <dbl>    <dbl>      <dbl>      <dbl> <dbl> <dbl> <dbl>    <dbl> <dbl>  <dbl>\n1      -4       -4         -4         -4     1     1     5        3     2      1\n2       0        1          4          3     2     8     5        3     2      1\n# ℹ 12,684 more rows\n# ℹ 4 more variables: income <dbl>, res_1980 <dbl>, res_2002 <dbl>,\n#   age_bir <dbl>\n```\n:::\n:::\n\n\n## Other functions come from the `{haven}` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedical_dta <- haven::read_dta(\"http://www.principlesofeconometrics.com/stata/medical.dta\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmedical_sas <- haven::read_sas(\"http://www.principlesofeconometrics.com/sas/medical.sas7bdat\")\n```\n:::\n\n\n::::columns\n::: .column{width=50%}\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(medical_dta)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 6\n$ id     <dbl> 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, …\n$ year   <dbl> 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, …\n$ medexp <dbl> 9, 9, 9, 10, 11, 6, 7, 7, 7, 7, 4, 3, 5, 4, 4, 5, 3, 6, 6, 3, 4…\n$ inc    <dbl> 49, 51, 55, 58, 61, 48, 48, 58, 59, 63, 46, 51, 55, 58, 63, 68,…\n$ age    <dbl> 51, 52, 53, 54, 55, 62, 63, 64, 65, 66, 57, 58, 59, 60, 61, 48,…\n$ insur  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, …\n```\n:::\n:::\n\n:::\n::: .column{width=50%}\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(medical_sas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 6\n$ ID     <dbl> 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, …\n$ YEAR   <dbl> 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, …\n$ MEDEXP <dbl> 9, 9, 9, 10, 11, 6, 7, 7, 7, 7, 4, 3, 5, 4, 4, 5, 3, 6, 6, 3, 4…\n$ INC    <dbl> 49, 51, 55, 58, 61, 48, 48, 58, 59, 63, 46, 51, 55, 58, 63, 68,…\n$ AGE    <dbl> 51, 52, 53, 54, 55, 62, 63, 64, 65, 66, 57, 58, 59, 60, 61, 48,…\n$ INSUR  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, …\n```\n:::\n:::\n\n:::\n::::\n\n## Or `{readxl}`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the example file\ndata_file <- readxl::readxl_example(\"datasets.xls\")\ndata_file\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/l.smith/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.3/aarch64-apple-darwin20/readxl/1.4.2/2e6020b1399d95f947ed867045e9ca17/readxl/extdata/datasets.xls\"\n```\n:::\n\n```{.r .cell-code}\n# read it in\ndat <- readxl::read_excel(data_file)\n```\n:::\n\n\nAll these functions take arguments, but `read_excel()` takes *a ton* of arguments -- which sheet, how many rows to read, whether there are column names, a specific range to read in, etc....\n\n- See `help(read_excel)` for details!\n\n# Exercise\n\n## File paths\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data-files 2.html\"    \"data-files_files\"     \"data-files.qmd\"      \n[4] \"data-files.rmarkdown\" \"joins.html\"           \"joins.qmd\"           \n[7] \"summarize.html\"       \"summarize.qmd\"       \n```\n:::\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/l.smith/Documents/Teaching/Harvard/ID543/day_3/slides\"\n```\n:::\n\n```{.r .cell-code}\nfile.path(\"data\", \"my_dataset.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data/my_dataset.csv\"\n```\n:::\n\n```{.r .cell-code}\nfile.path(\"~\", \"Downloads\", \"my_dataset.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"~/Downloads/my_dataset.csv\"\n```\n:::\n\n```{.r .cell-code}\nfile.path(\"C:\", \"Users\", \"Downloads\", \"my_dataset.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/Downloads/my_dataset.csv\"\n```\n:::\n\n```{.r .cell-code}\n# file.choose()\n```\n:::\n\n\n## It can be difficult to navigate the file system\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproj_wd <- getwd()\n```\n:::\n\nGo down two levels from the top-level directory to where the super important figures are stored \n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"figures/super important\")\nread_rds(\"important_plot.rds\")\n```\n:::\n\nNow that you're there, go up two levels and down two different levels to access the data\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- read_csv(\"../../data/raw/nlsy.csv\")\n```\n:::\n\nGo back to where we started!\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(proj_wd)\n```\n:::\n\n\n## R Projects\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n```\nmy-project/\n├─ my-project.Rproj\n├─ README\n├─ data/\n│   ├── raw/\n│   └── processed/\n├─ R/\n├─ results/\n│   ├── tables/\n│   ├── figures/\n│   └── output/\n└─ docs/\n```\n\n:::\n\n::: {.column width=\"70%\"}\n- An `.Rproj` file is mostly just a placeholder. It remembers various options, and makes it easy to open a new RStudio session that starts up in the correct working directory. You never need to edit it directly.\n\n- A README file can just be a text file that includes notes for yourself or future users.\n\n- I like to have a folder for raw data -- which I never touch -- and a folder(s) for datasets that I create along the way.\n\n:::\n\n::::\n\n## R Projects\n\nDemo\n\n\n## Referring to files with the `here` package {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here::here(\"R\", \"functions.R\"))\n\ndat <- read_csv(here::here(\"data\", \"raw\", \"data.csv\"))\n\np <- ggplot(dat) + geom_point(aes(x, y))\n\nggsave(plot = p, \n       filename = here::here(\"results\", \"figures\", \"fig.pdf\"))\n```\n:::\n\n\n- The `here` package lets you refer to files without worrying too much about relative paths.\n\n- Construct file paths with reference to the top directory holding your `.Rproj` file.\n\n- `here::here(\"data\", \"raw\", \"data.csv\")` for me, here, becomes `\"/Users/l.smith/Documents/Teaching/Harvard/ID543/data/raw/data.csv\"`\n\n- But if I send you my code to run, it will become whatever file path *you* need it to be.\n\n\n## Referring to the `here` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here()\n```\n:::\n\n\nis equivalent to\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nhere()\n```\n:::\n\nI just prefer to write out the package name whenever I need it, but you can load the package for your entire session if you want.\n\nNote that you can refer to any function without loading the whole package this way\n\n\n## The `source()` function\n\nWill run code from another file.\n\n::: {.cell}\n\n```{.r .cell-code}\n# run the code in script.R\n# assuming it's in my current working directory\nsource(\"script.R\")\n\n# run the code in my-project/R/functions.R \n# from wherever I am in my-project\nsource(here::here(\"R\", \"functions.R\"))\n```\n:::\n\nAll the objects will be created, packages loaded, etc. as if you had run the code directly from the console.\n\n# Exercise\n\n\n## Missing values\n\n- R uses `NA` for missing values\n- Unlike some other statistical software, it will return `NA` to any logical statement\n- This makes it somewhat harder to deal with but also harder to make mistakes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 < NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmean(c(1, 2, NA))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmean(c(1, 2, NA), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.5\n```\n:::\n:::\n\n\n## Special `NA` functions\nCertain functions deal with missing values explicitly\n\n::: {.cell}\n\n```{.r .cell-code}\nvals <- c(1, 2, NA)\nis.na(vals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nanyNA(vals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nna.omit(vals)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n:::\n\n\n## Read in NA's directly\n\nIn NLSY, -1 = Refused, -2 = Don't know, -3 = Invalid missing, -4 = Valid missing, -5 = Non-interview\n\nOther files might have \".\" for missing, or 999.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_cols <- c(\"glasses\", \"eyesight\", \"sleep_wkdy\", \"sleep_wknd\", \n               \"id\", \"nsibs\", \"samp\", \"race_eth\", \"sex\", \"region\", \n               \"income\", \"res_1980\", \"res_2002\", \"age_bir\")\nnlsy <- read_csv(here::here(\"data\", \"nlsy.csv\"), \n                 na = c(\"-1\", \"-2\", \"-3\", \"-4\", \"-5\"),\n                 skip = 1, col_names = nlsy_cols)\n```\n:::\n\n\n- You have to write the values as strings, even if they're numbers\n\n## Reasons for missingness\n\nCaveat: This previous way, you lose the info about the reason for missingness. If that's important, read in the data first, create a variable for missingness reason (e.g., use `fct_recode()`), then changes the values to `NA`.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- read_csv(here::here(\"data\", \"nlsy.csv\"),\n                 skip = 1, col_names = nlsy_cols) |> \n  mutate(age_bir_missing = ifelse(age_bir > 0, NA, age_bir),\n         age_bir_missing = fct_recode(factor(age_bir_missing),\n                                      \"Refused\" = \"-1\", \n                                      \"Don't know\" = \"-2\", \n                                      \"Invalid missing\" = \"-3\",\n                                      \"Valid missing\" = \"-4\",\n                                      \"Non-interview\" = \"-5\",\n                                      \"Other missing\" = \"-998\"))\nsummary(nlsy$age_bir_missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Other missing   Non-interview Invalid missing            NA's \n           1343            5385              15            5943 \n```\n:::\n:::\n\n\n## Specific missingness\n\nYou know some value is implausible, whether for everyone or for a specific observation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- nlsy |>\n  mutate(sleep_wknd = ifelse(sleep_wknd > 24, NA, sleep_wknd),\n         income = ifelse(id == 283, NA, income),\n         nsibs = na_if(nsibs, 99))\n```\n:::\n\n\n`na_if(x, y)` will replace values in `x` that are equal to `y` with NA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna_if(c(1, 2, 99), 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2 NA\n```\n:::\n:::\n\n\n## Complete cases\n\nSometimes you may just want to get rid of all the rows with missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(nlsy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12686\n```\n:::\n\n```{.r .cell-code}\nnlsy_cc <- nlsy |> filter(complete.cases(nlsy))\nnrow(nlsy_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6743\n```\n:::\n\n```{.r .cell-code}\nnlsy2 <- nlsy |> na.omit()\nnrow(nlsy2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6743\n```\n:::\n:::\n\n\n::: {.callout-important}\nDon't do this without good reason!\n:::\n\n# Exercise\n\n",
    "supporting": [
      "data-files_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}