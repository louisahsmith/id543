{
  "hash": "cad41970c5fbc6bd369dfe7063e2683d",
  "result": {
    "markdown": "---\ntitle: \"Arranging and merging data\"\nformat: \n  revealjs:\n    theme: \n      - ../../www/custom.scss\norder: 2\nexecute: \n  echo: true\n---\n\n\n## Sorting a dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nnlsy_sleep <- read_rds(\"https://github.com/louisahsmith/id543/raw/main/data/nlsy.rds\") |> \n  select(id, contains(\"sleep\"), age_bir, sex)\n```\n:::\n\n\nUse `arrange(data, sorting_column)` to sort data (in increasing order)\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(nlsy_sleep, sleep_wknd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,205 × 5\n      id sleep_wkdy sleep_wknd age_bir   sex\n   <dbl>      <dbl>      <dbl>   <dbl> <dbl>\n 1  5088          0          0      19     2\n 2  7192          2          2      20     2\n 3  7493          2          2      19     2\n 4  7501          2          2      16     2\n 5   343          3          3      19     2\n 6   555          4          3      21     1\n 7  1342          3          3      20     1\n 8  1455          3          3      16     2\n 9  2676          3          3      23     1\n10  3584          3          3      22     2\n# ℹ 1,195 more rows\n```\n:::\n:::\n\n\n## Additional sorting\n\n:::: columns\n::: {.column width=50%}\nSort in descending order\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(nlsy_sleep, \n        desc(sleep_wkdy))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,205 × 5\n      id sleep_wkdy sleep_wknd age_bir   sex\n   <dbl>      <dbl>      <dbl>   <dbl> <dbl>\n 1 10259         13         13      16     2\n 2  5913         12         12      17     2\n 3  6357         12         12      22     2\n 4  3704         11          9      15     2\n 5    18         10         10      19     1\n 6  2318         10         10      18     1\n 7  2395         10         10      19     2\n 8  2474         10         10      18     2\n 9  2634         10         10      25     1\n10  2741         10         10      20     1\n# ℹ 1,195 more rows\n```\n:::\n:::\n\n:::\n::: {.column width=50%}\nSort by two variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(nlsy_sleep, \n        age_bir, sleep_wknd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,205 × 5\n      id sleep_wkdy sleep_wknd age_bir   sex\n   <dbl>      <dbl>      <dbl>   <dbl> <dbl>\n 1   995          7         10      13     2\n 2  3768          4          4      14     2\n 3  8209          6          4      14     1\n 4  6399          6          6      14     2\n 5  7938          6          6      14     2\n 6 10331          6          6      14     2\n 7   625          7          7      14     1\n 8  3316          5          7      14     2\n 9  4262          6          8      14     2\n10 11850          8          8      14     2\n# ℹ 1,195 more rows\n```\n:::\n:::\n\n:::\n::::\n\n## Joins\n\nThere are multiple functions in the `tidyverse` (specifically, the `{dplyr}` package) for joining/merging data\n\n**Mutating joins** merge two datasets based on matching variable(s), adding together the new columns from the joined dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x, y, by = join_by(xcol == ycol))\n```\n:::\n\n\n::: callout-note\nWe will also refer to the `x` dataframe as the left-hand side (LHS) and the `y` dataframe as the right-hand side (RHS)\n:::\n\n## Merging with kids\n\nThe NLSY also included the kids of the moms in the NLSY79 survey that we're using.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_kids\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11,551 × 6\n   id_kid id_mom sex_kid dob_kid agebir_mom bwt_kid\n    <dbl>  <dbl>   <dbl>   <dbl>      <dbl>   <dbl>\n 1    201      2       2    1993         34     139\n 2    202      2       2    1994         35      NA\n 3    301      3       2    1981         19     162\n 4    302      3       2    1983         22     144\n 5    303      3       2    1986         24     112\n 6    401      4       1    1980         18     107\n 7    403      4       2    1997         34      NA\n 8    801      8       2    1976         17     119\n 9    802      8       1    1979         20     107\n10    803      8       2    1982         24     146\n# ℹ 11,541 more rows\n```\n:::\n:::\n\n\n::: callout-note\nBirthweight is in ounces\n:::\n\n## Left join\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(nlsy_sleep, nlsy_kids)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `left_join()`:\n! `by` must be supplied when `x` and `y` have no common variables.\nℹ Use `cross_join()` to perform a cross-join.\n```\n:::\n:::\n\n\nIt will automatically look for matching columns (can be dangerous!) but if none, need to specify:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(nlsy_sleep, nlsy_kids, \n          by = join_by(id == id_mom))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,284 × 10\n      id sleep_wkdy sleep_wknd age_bir   sex id_kid sex_kid dob_kid agebir_mom\n   <dbl>      <dbl>      <dbl>   <dbl> <dbl>  <dbl>   <dbl>   <dbl>      <dbl>\n 1     3          5          7      19     2    301       2    1981         19\n 2     3          5          7      19     2    302       2    1983         22\n 3     3          5          7      19     2    303       2    1986         24\n 4     6          6          7      30     1     NA      NA      NA         NA\n 5     8          7          9      17     2    801       2    1976         17\n 6     8          7          9      17     2    802       1    1979         20\n 7     8          7          9      17     2    803       2    1982         24\n 8    16          6          7      31     2   1601       1    1990         31\n 9    16          6          7      31     2   1602       1    1993         34\n10    16          6          7      31     2   1603       2    1996         37\n# ℹ 2,274 more rows\n# ℹ 1 more variable: bwt_kid <dbl>\n```\n:::\n:::\n\n\n## Left join\n\nLHS rows are duplicated if we have multiple matches, but we lose any rows in the RHS dataset that don't have a match\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(nlsy_kids$id_kid))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11551\n```\n:::\n\n```{.r .cell-code}\nnlsy_left <- left_join(nlsy_sleep, nlsy_kids,\n                       by = join_by(id == id_mom))\n\nlength(unique(nlsy_left$id_kid))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1784\n```\n:::\n:::\n\n\nIn this case, the moms of some of the kids aren't in the `nlsy_sleep` dataset, so kids without moms are lost\n\n## {background-image=\"https://github.com/gadenbuie/tidyexplain/blob/main/images/left-join-extra.gif?raw=true\" background-size=contain}\n\n## Right join\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(nlsy_sleep, nlsy_kids, by = join_by(id == id_mom))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11,551 × 10\n      id sleep_wkdy sleep_wknd age_bir   sex id_kid sex_kid dob_kid agebir_mom\n   <dbl>      <dbl>      <dbl>   <dbl> <dbl>  <dbl>   <dbl>   <dbl>      <dbl>\n 1     3          5          7      19     2    301       2    1981         19\n 2     3          5          7      19     2    302       2    1983         22\n 3     3          5          7      19     2    303       2    1986         24\n 4     8          7          9      17     2    801       2    1976         17\n 5     8          7          9      17     2    802       1    1979         20\n 6     8          7          9      17     2    803       2    1982         24\n 7    16          6          7      31     2   1601       1    1990         31\n 8    16          6          7      31     2   1602       1    1993         34\n 9    16          6          7      31     2   1603       2    1996         37\n10    20          7          8      30     2   2001       2    1990         30\n# ℹ 11,541 more rows\n# ℹ 1 more variable: bwt_kid <dbl>\n```\n:::\n:::\n\n\n- Now we don't have the dads, because there are no matching ids in the RHS dataset\n\n- But we do keep all the kids, even those without moms in the LHS\n\n## {background-image=\"https://github.com/gadenbuie/tidyexplain/blob/main/images/right-join.gif?raw=true\" background-size=contain}\n\n## Full join: we want everything!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(nlsy_sleep, nlsy_kids, by = join_by(id == id_mom))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12,052 × 10\n      id sleep_wkdy sleep_wknd age_bir   sex id_kid sex_kid dob_kid agebir_mom\n   <dbl>      <dbl>      <dbl>   <dbl> <dbl>  <dbl>   <dbl>   <dbl>      <dbl>\n 1     3          5          7      19     2    301       2    1981         19\n 2     3          5          7      19     2    302       2    1983         22\n 3     3          5          7      19     2    303       2    1986         24\n 4     6          6          7      30     1     NA      NA      NA         NA\n 5     8          7          9      17     2    801       2    1976         17\n 6     8          7          9      17     2    802       1    1979         20\n 7     8          7          9      17     2    803       2    1982         24\n 8    16          6          7      31     2   1601       1    1990         31\n 9    16          6          7      31     2   1602       1    1993         34\n10    16          6          7      31     2   1603       2    1996         37\n# ℹ 12,042 more rows\n# ℹ 1 more variable: bwt_kid <dbl>\n```\n:::\n:::\n\n\nThis dataset is larger than either of the initial datasets alone: it has the dads without kids and the kids without moms\n\n## {background-image=\"https://github.com/gadenbuie/tidyexplain/blob/main/images/full-join.gif?raw=true\" background-size=contain}\n\n## Inner join: we *only* want matches\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(nlsy_sleep, nlsy_kids, by = join_by(id == id_mom))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,783 × 10\n      id sleep_wkdy sleep_wknd age_bir   sex id_kid sex_kid dob_kid agebir_mom\n   <dbl>      <dbl>      <dbl>   <dbl> <dbl>  <dbl>   <dbl>   <dbl>      <dbl>\n 1     3          5          7      19     2    301       2    1981         19\n 2     3          5          7      19     2    302       2    1983         22\n 3     3          5          7      19     2    303       2    1986         24\n 4     8          7          9      17     2    801       2    1976         17\n 5     8          7          9      17     2    802       1    1979         20\n 6     8          7          9      17     2    803       2    1982         24\n 7    16          6          7      31     2   1601       1    1990         31\n 8    16          6          7      31     2   1602       1    1993         34\n 9    16          6          7      31     2   1603       2    1996         37\n10    20          7          8      30     2   2001       2    1990         30\n# ℹ 1,773 more rows\n# ℹ 1 more variable: bwt_kid <dbl>\n```\n:::\n:::\n\n\n- This dataset has only the moms with kids (no dads) and the kids with moms\n- It still has multiple rows per mom -- one for each kid\n\n## {background-image=\"https://github.com/gadenbuie/tidyexplain/blob/main/images/inner-join.gif?raw=true\" background-size=contain}\n\n## Join by multiple variables\n\n- I only want the kid that was the mom's first\n- I'm going to match on the age at first birth on the RHS\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_births <- inner_join(nlsy_sleep, nlsy_kids, \n                           by = join_by(id == id_mom,\n                                        age_bir == agebir_mom))\n\nfirst_births\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 708 × 9\n      id sleep_wkdy sleep_wknd age_bir   sex id_kid sex_kid dob_kid bwt_kid\n   <dbl>      <dbl>      <dbl>   <dbl> <dbl>  <dbl>   <dbl>   <dbl>   <dbl>\n 1     3          5          7      19     2    301       2    1981     162\n 2     8          7          9      17     2    801       2    1976     119\n 3    16          6          7      31     2   1601       1    1990     109\n 4    20          7          8      30     2   2001       2    1990     129\n 5    27          8          8      27     2   2701       2    1988     117\n 6    49          8          8      24     2   4901       1    1982     139\n 7    57          7          8      21     2   5701       1    1979     148\n 8    86          8          8      17     2   8601       2    1977      97\n 9    96          7          7      19     2   9601       2    1980     124\n10    97          7          8      29     2   9701       1    1987      48\n# ℹ 698 more rows\n```\n:::\n:::\n\n\n# Exercise\n\n",
    "supporting": [
      "joins_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}