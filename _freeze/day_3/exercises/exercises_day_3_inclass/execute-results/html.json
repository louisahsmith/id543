{
  "hash": "580ccb6ef79233415d1fc79315990234",
  "result": {
    "markdown": "---\ntitle: \"Solutions to Day 3 Exercises\"\n---\n\n\n# Exercises 1\n\nRead the [Stata](http://www.principlesofeconometrics.com/stata.htm) or [SAS](http://www.principlesofeconometrics.com/sas.htm) dataset of your choice into R. Investigate it a bit -- look at the variables, etc. (I have no idea what any of these datasets are!). Save it as an `.rds` file and/or a `.csv` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(haven)\nvacation <- read_dta(\"http://www.principlesofeconometrics.com/stata/vacation.dta\")\nwrite_rds(vacation, here::here(\"vacation.rds\")) # then move manually\n\nalcohol <- read_dta(\"http://www.principlesofeconometrics.com/stata/alcohol.dta\")\nwrite_csv(alcohol, here::here(\"data\", \"vacation.cvs\"))\n```\n:::\n\n\n# Exercises 2\n\nCreate an R project! \n\nCopy and paste <https://github.com/louisahsmith/id543/raw/main/data/nlsy.rds> into your browser to download the data as an `.rds` file. Create a `data/` directory in your R project and move it there. Move this `.qmd` folder into your R project as well. Now this code should read in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy <- readr::read_rds(here::here(\"data\", \"nlsy.rds\"))\n```\n:::\n\n\nMove the dataset you created in the previous exercise into the `data/` directory as well. Write code to read it in:\n\n::: {.cell}\n\n:::\n\n\nCreate a plot -- of anything! -- using the dataset you downloaded. Save it as a `.png` file using `ggsave()` to a `figures/` directory that you create.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(vacation) + geom_histogram(aes(miles))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](exercises_day_3_inclass_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(here::here(\"figures\", \"best-plots\", \"plot.png\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n:::\n\n\n# Exercises 3\n\nRead in the `nlsy` dataset if it's not already in your environment. Replace the sleep variables with `NA` if they are 12 or greater. Create a dataset with `id`, the sleep variables, and the income variables, and restrict it to complete cases. Save that dataset as a csv file in your `code/` directory.\n\n\n::: {.cell}\n\n:::\n\n\n# Exercises 4\n\nRead in the kids dataset. You'll have to fill in the rest of the code for reading in the `.csv` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkids_cols <- c(\"id_kid\", \"id\", \"sex_kid\", \"dob_kid\",\"agebir_mom\", \"bwt_kid\")\n\nnlsy_kids <- read_csv(\"https://github.com/louisahsmith/id543/raw/main/data/nlsy-child.csv\", \n                      skip = 1, \n                      col_names = kids_cols, \n                      na = c(\"-5\", \"-4\", \"-3\", \"-2\", \"-1\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 11551 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (6): id_kid, id, sex_kid, dob_kid, agebir_mom, bwt_kid\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nnlsy_kids\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11,551 × 6\n   id_kid    id sex_kid dob_kid agebir_mom bwt_kid\n    <dbl> <dbl>   <dbl>   <dbl>      <dbl>   <dbl>\n 1    201     2       2    1993         34     139\n 2    202     2       2    1994         35      NA\n 3    301     3       2    1981         19     162\n 4    302     3       2    1983         22     144\n 5    303     3       2    1986         24     112\n 6    401     4       1    1980         18     107\n 7    403     4       2    1997         34      NA\n 8    801     8       2    1976         17     119\n 9    802     8       1    1979         20     107\n10    803     8       2    1982         24     146\n# ℹ 11,541 more rows\n```\n:::\n:::\n\n\nCreate the smaller version of the dataset we were using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_sleep <- read_rds(\"https://github.com/louisahsmith/id543/raw/main/data/nlsy.rds\") |> \n  select(id, contains(\"sleep\"), age_bir, sex)\n```\n:::\n\n\nPractice the joins we did: left, right, full, and inner. Look at the differences in the data that results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_data <- inner_join(nlsy_sleep, nlsy_kids, by = join_by(id))\n```\n:::\n\n\nWhen we wanted to join on the mom's first birth, we used `join_by(id == id_mom, age_bir == agebir_mom)`. Read the documentation for `join_by()` to help you create a dataset that has only the kids from the mom's *later* births.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_data <- inner_join(nlsy_sleep, nlsy_kids, by = join_by(id == id, \n                                                              age_bir == agebir_mom))\n```\n:::\n\n\n# Exercises 5\n\nWithin the `nlsy_kids` dataset, calculate summary statistics for the kids:\n\n- the minimum and maximum year of birth\n- the mean birthweight in grams (you will have to convert first!)\n- bonus: the proportion of kids who were less than 2500g at birth (hint: what is the mean of a binary variable? You will need to create that binary variable)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_kids |> \n  mutate(bwt_g = bwt_kid * 28.3495,\n         lbw = bwt_g < 2500) |> \n  summarize(min_yob = min(dob_kid),\n            max_yob = max(dob_kid),\n            mean_bwt = mean(bwt_g, na.rm = TRUE),\n            prop_lbwt = mean(lbw, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  min_yob max_yob mean_bwt prop_lbwt\n    <dbl>   <dbl>    <dbl>     <dbl>\n1    1970    2014    3249.     0.103\n```\n:::\n\n```{.r .cell-code}\nnlsy_kids |> \n  mutate(bwt_g = bwt_kid * 28.3495,\n         lbw = bwt_g < 2500) |> \n  summarize(min_yob = min(dob_kid),\n            max_yob = max(dob_kid),\n            mean_bwt = mean(na.omit(bwt_g)),\n            prop_lbwt = mean(na.omit(lbw)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  min_yob max_yob mean_bwt prop_lbwt\n    <dbl>   <dbl>    <dbl>     <dbl>\n1    1970    2014    3249.     0.103\n```\n:::\n\n```{.r .cell-code}\nnlsy_kids |> \n  summarize(min_yob = min(dob_kid),\n            max_yob = max(dob_kid),\n            mean_bwt = mean(bwt_kid * 28.3495, na.rm = TRUE),\n            prop_lbwt = mean(bwt_kid * 28.3495 < 2500, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  min_yob max_yob mean_bwt prop_lbwt\n    <dbl>   <dbl>    <dbl>     <dbl>\n1    1970    2014    3249.     0.103\n```\n:::\n:::\n\n\n# Exercises 6\n\nDo the same as above, but separately for male and female children. First, however, turn the `sex_kid` variable into a factor variable with \"male\" = 1, \"female\" = 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_kids |> \n  mutate(sex_kid = factor(sex_kid, \n                          levels = c(1, 2), labels = c(\"male\", \"female\")),\n         bwt_g = bwt_kid * 28.3495,\n         lbw = bwt_g < 2500) |> \n  summarize(min_yob = min(dob_kid),\n            max_yob = max(dob_kid),\n            mean_bwt = mean(bwt_g, na.rm = TRUE),\n            prop_lbwt = mean(lbw, na.rm = TRUE), \n            .by = sex_kid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  sex_kid min_yob max_yob mean_bwt prop_lbwt\n  <fct>     <dbl>   <dbl>    <dbl>     <dbl>\n1 female     1970    2011    3194.    0.109 \n2 male       1972    2014    3302.    0.0968\n3 <NA>       1975    1976    1233.    0.5   \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnlsy_kids |> \n  distinct(id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,943 × 1\n      id\n   <dbl>\n 1     2\n 2     3\n 3     4\n 4     8\n 5    10\n 6    12\n 7    16\n 8    19\n 9    20\n10    25\n# ℹ 4,933 more rows\n```\n:::\n:::\n",
    "supporting": [
      "exercises_day_3_inclass_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}